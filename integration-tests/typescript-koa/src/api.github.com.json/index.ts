/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import joi from "@hapi/joi"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"

//region safe-edit-region-header
//endregion safe-edit-region-header

function paramValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{}, { params: Type }> {
  return function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.params, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.params = result.value

    next()
  }
}

function queryValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{}, { query: Type }> {
  return function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.query, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.query = result.value

    next()
  }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

router.get("appsGetAuthenticated", "/app", async (ctx, next) => {
  //region safe-edit-region-appsGetAuthenticated

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-appsGetAuthenticated
})

const appsCreateFromManifestParamSchema = joi
  .object()
  .keys({ code: joi.string().required() })

router.post(
  "appsCreateFromManifest",
  "/app-manifests/:code/conversions",
  paramValidationFactory<any>(appsCreateFromManifestParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsCreateFromManifest

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateFromManifest
  }
)

const appsListInstallationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListInstallations",
  "/app/installations",
  queryValidationFactory<any>(appsListInstallationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallations
  }
)

const appsGetInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

router.get(
  "appsGetInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<any>(appsGetInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetInstallation
  }
)

const appsDeleteInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

router.delete(
  "appsDeleteInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<any>(appsDeleteInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsDeleteInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteInstallation
  }
)

const appsCreateInstallationAccessTokenParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

router.post(
  "appsCreateInstallationAccessToken",
  "/app/installations/:installationId/access_tokens",
  paramValidationFactory<any>(appsCreateInstallationAccessTokenParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsCreateInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateInstallationAccessToken
  }
)

const appsSuspendInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

router.put(
  "appsSuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<any>(appsSuspendInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsSuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsSuspendInstallation
  }
)

const appsUnsuspendInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

router.delete(
  "appsUnsuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<any>(appsUnsuspendInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsUnsuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsUnsuspendInstallation
  }
)

const oauthAuthorizationsListGrantsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "oauthAuthorizationsListGrants",
  "/applications/grants",
  queryValidationFactory<any>(oauthAuthorizationsListGrantsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsListGrants

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsListGrants
  }
)

const oauthAuthorizationsGetGrantParamSchema = joi
  .object()
  .keys({ grant_id: joi.number().required() })

router.get(
  "oauthAuthorizationsGetGrant",
  "/applications/grants/:grantId",
  paramValidationFactory<any>(oauthAuthorizationsGetGrantParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsGetGrant

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetGrant
  }
)

const oauthAuthorizationsDeleteGrantParamSchema = joi
  .object()
  .keys({ grant_id: joi.number().required() })

router.delete(
  "oauthAuthorizationsDeleteGrant",
  "/applications/grants/:grantId",
  paramValidationFactory<any>(oauthAuthorizationsDeleteGrantParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsDeleteGrant

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsDeleteGrant
  }
)

const appsDeleteAuthorizationParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })

router.delete(
  "appsDeleteAuthorization",
  "/applications/:clientId/grant",
  paramValidationFactory<any>(appsDeleteAuthorizationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsDeleteAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteAuthorization
  }
)

const appsRevokeGrantForApplicationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })

router.delete(
  "appsRevokeGrantForApplication",
  "/applications/:clientId/grants/:accessToken",
  paramValidationFactory<any>(appsRevokeGrantForApplicationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsRevokeGrantForApplication

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeGrantForApplication
  }
)

const appsCheckTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })

router.post(
  "appsCheckToken",
  "/applications/:clientId/token",
  paramValidationFactory<any>(appsCheckTokenParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsCheckToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCheckToken
  }
)

const appsResetTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })

router.patch(
  "appsResetToken",
  "/applications/:clientId/token",
  paramValidationFactory<any>(appsResetTokenParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsResetToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsResetToken
  }
)

const appsDeleteTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })

router.delete(
  "appsDeleteToken",
  "/applications/:clientId/token",
  paramValidationFactory<any>(appsDeleteTokenParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsDeleteToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteToken
  }
)

const appsCheckAuthorizationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })

router.get(
  "appsCheckAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<any>(appsCheckAuthorizationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsCheckAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCheckAuthorization
  }
)

const appsResetAuthorizationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })

router.post(
  "appsResetAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<any>(appsResetAuthorizationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsResetAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsResetAuthorization
  }
)

const appsRevokeAuthorizationForApplicationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })

router.delete(
  "appsRevokeAuthorizationForApplication",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<any>(appsRevokeAuthorizationForApplicationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsRevokeAuthorizationForApplication

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeAuthorizationForApplication
  }
)

const appsGetBySlugParamSchema = joi
  .object()
  .keys({ app_slug: joi.string().required() })

router.get(
  "appsGetBySlug",
  "/apps/:appSlug",
  paramValidationFactory<any>(appsGetBySlugParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetBySlug

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetBySlug
  }
)

const oauthAuthorizationsListAuthorizationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "oauthAuthorizationsListAuthorizations",
  "/authorizations",
  queryValidationFactory<any>(oauthAuthorizationsListAuthorizationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsListAuthorizations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsListAuthorizations
  }
)

router.post(
  "oauthAuthorizationsCreateAuthorization",
  "/authorizations",
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsCreateAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsCreateAuthorization
  }
)

const oauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForApp",
  "/authorizations/clients/:clientId",
  paramValidationFactory<any>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForApp

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForApp
  }
)

const oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    fingerprint: joi.string().required(),
  })

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint",
  "/authorizations/clients/:clientId/:fingerprint",
  paramValidationFactory<any>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint
  }
)

const oauthAuthorizationsGetAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })

router.get(
  "oauthAuthorizationsGetAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<any>(oauthAuthorizationsGetAuthorizationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsGetAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetAuthorization
  }
)

const oauthAuthorizationsUpdateAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })

router.patch(
  "oauthAuthorizationsUpdateAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<any>(
    oauthAuthorizationsUpdateAuthorizationParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsUpdateAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsUpdateAuthorization
  }
)

const oauthAuthorizationsDeleteAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })

router.delete(
  "oauthAuthorizationsDeleteAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<any>(
    oauthAuthorizationsDeleteAuthorizationParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-oauthAuthorizationsDeleteAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsDeleteAuthorization
  }
)

router.get(
  "codesOfConductGetAllCodesOfConduct",
  "/codes_of_conduct",
  async (ctx, next) => {
    //region safe-edit-region-codesOfConductGetAllCodesOfConduct

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetAllCodesOfConduct
  }
)

const codesOfConductGetConductCodeParamSchema = joi
  .object()
  .keys({ key: joi.string().required() })

router.get(
  "codesOfConductGetConductCode",
  "/codes_of_conduct/:key",
  paramValidationFactory<any>(codesOfConductGetConductCodeParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-codesOfConductGetConductCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetConductCode
  }
)

const appsCreateContentAttachmentParamSchema = joi
  .object()
  .keys({ content_reference_id: joi.number().required() })

router.post(
  "appsCreateContentAttachment",
  "/content_references/:contentReferenceId/attachments",
  paramValidationFactory<any>(appsCreateContentAttachmentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsCreateContentAttachment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateContentAttachment
  }
)

router.get("emojisGet", "/emojis", async (ctx, next) => {
  //region safe-edit-region-emojisGet

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-emojisGet
})

const activityListPublicEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListPublicEvents",
  "/events",
  queryValidationFactory<any>(activityListPublicEventsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListPublicEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEvents
  }
)

router.get("activityGetFeeds", "/feeds", async (ctx, next) => {
  //region safe-edit-region-activityGetFeeds

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-activityGetFeeds
})

const gistsListQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "gistsList",
  "/gists",
  queryValidationFactory<any>(gistsListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsList
  }
)

router.post("gistsCreate", "/gists", async (ctx, next) => {
  //region safe-edit-region-gistsCreate

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-gistsCreate
})

const gistsListPublicQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListPublic",
  "/gists/public",
  queryValidationFactory<any>(gistsListPublicQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListPublic
  }
)

const gistsListStarredQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListStarred",
  "/gists/starred",
  queryValidationFactory<any>(gistsListStarredQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListStarred
  }
)

const gistsGetParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.get(
  "gistsGet",
  "/gists/:gistId",
  paramValidationFactory<any>(gistsGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGet
  }
)

const gistsUpdateParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.patch(
  "gistsUpdate",
  "/gists/:gistId",
  paramValidationFactory<any>(gistsUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdate
  }
)

const gistsDeleteParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.delete(
  "gistsDelete",
  "/gists/:gistId",
  paramValidationFactory<any>(gistsDeleteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDelete
  }
)

const gistsListCommentsParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

const gistsListCommentsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListComments",
  "/gists/:gistId/comments",
  paramValidationFactory<any>(gistsListCommentsParamSchema),
  queryValidationFactory<any>(gistsListCommentsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListComments
  }
)

const gistsCreateCommentParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.post(
  "gistsCreateComment",
  "/gists/:gistId/comments",
  paramValidationFactory<any>(gistsCreateCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCreateComment
  }
)

const gistsGetCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.get(
  "gistsGetComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<any>(gistsGetCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetComment
  }
)

const gistsUpdateCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.patch(
  "gistsUpdateComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<any>(gistsUpdateCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdateComment
  }
)

const gistsDeleteCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.delete(
  "gistsDeleteComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<any>(gistsDeleteCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDeleteComment
  }
)

const gistsListCommitsParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

const gistsListCommitsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListCommits",
  "/gists/:gistId/commits",
  paramValidationFactory<any>(gistsListCommitsParamSchema),
  queryValidationFactory<any>(gistsListCommitsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListCommits
  }
)

const gistsForkParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.post(
  "gistsFork",
  "/gists/:gistId/forks",
  paramValidationFactory<any>(gistsForkParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsFork
  }
)

const gistsListForksParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

const gistsListForksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListForks",
  "/gists/:gistId/forks",
  paramValidationFactory<any>(gistsListForksParamSchema),
  queryValidationFactory<any>(gistsListForksQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForks
  }
)

const gistsStarParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.put(
  "gistsStar",
  "/gists/:gistId/star",
  paramValidationFactory<any>(gistsStarParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsStar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsStar
  }
)

const gistsUnstarParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.delete(
  "gistsUnstar",
  "/gists/:gistId/star",
  paramValidationFactory<any>(gistsUnstarParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsUnstar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUnstar
  }
)

const gistsCheckIsStarredParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })

router.get(
  "gistsCheckIsStarred",
  "/gists/:gistId/star",
  paramValidationFactory<any>(gistsCheckIsStarredParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsCheckIsStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCheckIsStarred
  }
)

const gistsGetRevisionParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required(), sha: joi.string().required() })

router.get(
  "gistsGetRevision",
  "/gists/:gistId/:sha",
  paramValidationFactory<any>(gistsGetRevisionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsGetRevision

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetRevision
  }
)

router.get(
  "gitignoreGetAllTemplates",
  "/gitignore/templates",
  async (ctx, next) => {
    //region safe-edit-region-gitignoreGetAllTemplates

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetAllTemplates
  }
)

const gitignoreGetTemplateParamSchema = joi
  .object()
  .keys({ name: joi.string().required() })

router.get(
  "gitignoreGetTemplate",
  "/gitignore/templates/:name",
  paramValidationFactory<any>(gitignoreGetTemplateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitignoreGetTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetTemplate
  }
)

const appsListReposAccessibleToInstallationQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListReposAccessibleToInstallation",
  "/installation/repositories",
  queryValidationFactory<any>(appsListReposAccessibleToInstallationQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListReposAccessibleToInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListReposAccessibleToInstallation
  }
)

router.delete(
  "appsRevokeInstallationAccessToken",
  "/installation/token",
  async (ctx, next) => {
    //region safe-edit-region-appsRevokeInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeInstallationAccessToken
  }
)

const issuesListQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesList",
  "/issues",
  queryValidationFactory<any>(issuesListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesList
  }
)

router.get("licensesGetAllCommonlyUsed", "/licenses", async (ctx, next) => {
  //region safe-edit-region-licensesGetAllCommonlyUsed

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-licensesGetAllCommonlyUsed
})

const licensesGetParamSchema = joi
  .object()
  .keys({ license: joi.string().required() })

router.get(
  "licensesGet",
  "/licenses/:license",
  paramValidationFactory<any>(licensesGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-licensesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGet
  }
)

router.post("markdownRender", "/markdown", async (ctx, next) => {
  //region safe-edit-region-markdownRender

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-markdownRender
})

router.post("markdownRenderRaw", "/markdown/raw", async (ctx, next) => {
  //region safe-edit-region-markdownRenderRaw

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-markdownRenderRaw
})

const appsGetSubscriptionPlanForAccountParamSchema = joi
  .object()
  .keys({ account_id: joi.number().required() })

router.get(
  "appsGetSubscriptionPlanForAccount",
  "/marketplace_listing/accounts/:accountId",
  paramValidationFactory<any>(appsGetSubscriptionPlanForAccountParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccount

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccount
  }
)

const appsListPlansQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListPlans",
  "/marketplace_listing/plans",
  queryValidationFactory<any>(appsListPlansQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListPlans

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlans
  }
)

const appsListAccountsForPlanParamSchema = joi
  .object()
  .keys({ plan_id: joi.number().required() })

const appsListAccountsForPlanQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "appsListAccountsForPlan",
  "/marketplace_listing/plans/:planId/accounts",
  paramValidationFactory<any>(appsListAccountsForPlanParamSchema),
  queryValidationFactory<any>(appsListAccountsForPlanQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListAccountsForPlan

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlan
  }
)

const appsGetSubscriptionPlanForAccountStubbedParamSchema = joi
  .object()
  .keys({ account_id: joi.number().required() })

router.get(
  "appsGetSubscriptionPlanForAccountStubbed",
  "/marketplace_listing/stubbed/accounts/:accountId",
  paramValidationFactory<any>(
    appsGetSubscriptionPlanForAccountStubbedParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccountStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccountStubbed
  }
)

const appsListPlansStubbedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListPlansStubbed",
  "/marketplace_listing/stubbed/plans",
  queryValidationFactory<any>(appsListPlansStubbedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListPlansStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlansStubbed
  }
)

const appsListAccountsForPlanStubbedParamSchema = joi
  .object()
  .keys({ plan_id: joi.number().required() })

const appsListAccountsForPlanStubbedQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "appsListAccountsForPlanStubbed",
  "/marketplace_listing/stubbed/plans/:planId/accounts",
  paramValidationFactory<any>(appsListAccountsForPlanStubbedParamSchema),
  queryValidationFactory<any>(appsListAccountsForPlanStubbedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-appsListAccountsForPlanStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlanStubbed
  }
)

router.get("metaGet", "/meta", async (ctx, next) => {
  //region safe-edit-region-metaGet

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-metaGet
})

const activityListPublicEventsForRepoNetworkParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const activityListPublicEventsForRepoNetworkQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListPublicEventsForRepoNetwork",
  "/networks/:owner/:repo/events",
  paramValidationFactory<any>(
    activityListPublicEventsForRepoNetworkParamSchema
  ),
  queryValidationFactory<any>(
    activityListPublicEventsForRepoNetworkQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListPublicEventsForRepoNetwork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForRepoNetwork
  }
)

const activityListNotificationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    all: joi.boolean(),
    participating: joi.boolean(),
    since: joi.string(),
    before: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "activityListNotificationsForAuthenticatedUser",
  "/notifications",
  queryValidationFactory<any>(
    activityListNotificationsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListNotificationsForAuthenticatedUser
  }
)

router.put(
  "activityMarkNotificationsAsRead",
  "/notifications",
  async (ctx, next) => {
    //region safe-edit-region-activityMarkNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkNotificationsAsRead
  }
)

const activityGetThreadParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })

router.get(
  "activityGetThread",
  "/notifications/threads/:threadId",
  paramValidationFactory<any>(activityGetThreadParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityGetThread

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThread
  }
)

const activityMarkThreadAsReadParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })

router.patch(
  "activityMarkThreadAsRead",
  "/notifications/threads/:threadId",
  paramValidationFactory<any>(activityMarkThreadAsReadParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityMarkThreadAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkThreadAsRead
  }
)

const activityGetThreadSubscriptionForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })

router.get(
  "activityGetThreadSubscriptionForAuthenticatedUser",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<any>(
    activityGetThreadSubscriptionForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser
  }
)

const activitySetThreadSubscriptionParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })

router.put(
  "activitySetThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<any>(activitySetThreadSubscriptionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activitySetThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetThreadSubscription
  }
)

const activityDeleteThreadSubscriptionParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })

router.delete(
  "activityDeleteThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<any>(activityDeleteThreadSubscriptionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityDeleteThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteThreadSubscription
  }
)

const orgsListQuerySchema = joi.object().keys({ since: joi.number() })

router.get(
  "orgsList",
  "/organizations",
  queryValidationFactory<any>(orgsListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsList
  }
)

const orgsGetParamSchema = joi.object().keys({ org: joi.string().required() })

router.get(
  "orgsGet",
  "/orgs/:org",
  paramValidationFactory<any>(orgsGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGet
  }
)

const orgsUpdateParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.patch(
  "orgsUpdate",
  "/orgs/:org",
  paramValidationFactory<any>(orgsUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdate
  }
)

const actionsListSelfHostedRunnersForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const actionsListSelfHostedRunnersForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListSelfHostedRunnersForOrg",
  "/orgs/:org/actions/runners",
  paramValidationFactory<any>(actionsListSelfHostedRunnersForOrgParamSchema),
  queryValidationFactory<any>(actionsListSelfHostedRunnersForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForOrg
  }
)

const actionsListRunnerApplicationsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "actionsListRunnerApplicationsForOrg",
  "/orgs/:org/actions/runners/downloads",
  paramValidationFactory<any>(actionsListRunnerApplicationsForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListRunnerApplicationsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForOrg
  }
)

const actionsCreateRegistrationTokenForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "actionsCreateRegistrationTokenForOrg",
  "/orgs/:org/actions/runners/registration-token",
  paramValidationFactory<any>(actionsCreateRegistrationTokenForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForOrg
  }
)

const actionsCreateRemoveTokenForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "actionsCreateRemoveTokenForOrg",
  "/orgs/:org/actions/runners/remove-token",
  paramValidationFactory<any>(actionsCreateRemoveTokenForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateRemoveTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForOrg
  }
)

const actionsGetSelfHostedRunnerForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), runner_id: joi.number().required() })

router.get(
  "actionsGetSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<any>(actionsGetSelfHostedRunnerForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForOrg
  }
)

const actionsDeleteSelfHostedRunnerFromOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), runner_id: joi.number().required() })

router.delete(
  "actionsDeleteSelfHostedRunnerFromOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<any>(actionsDeleteSelfHostedRunnerFromOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg
  }
)

const actionsListOrgSecretsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const actionsListOrgSecretsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListOrgSecrets",
  "/orgs/:org/actions/secrets",
  paramValidationFactory<any>(actionsListOrgSecretsParamSchema),
  queryValidationFactory<any>(actionsListOrgSecretsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListOrgSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListOrgSecrets
  }
)

const actionsGetOrgPublicKeyParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "actionsGetOrgPublicKey",
  "/orgs/:org/actions/secrets/public-key",
  paramValidationFactory<any>(actionsGetOrgPublicKeyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetOrgPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgPublicKey
  }
)

const actionsGetOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })

router.get(
  "actionsGetOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsGetOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgSecret
  }
)

const actionsCreateOrUpdateOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })

router.put(
  "actionsCreateOrUpdateOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsCreateOrUpdateOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateOrUpdateOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateOrgSecret
  }
)

const actionsDeleteOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })

router.delete(
  "actionsDeleteOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsDeleteOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteOrgSecret
  }
)

const actionsListSelectedReposForOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })

router.get(
  "actionsListSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<any>(actionsListSelectedReposForOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedReposForOrgSecret
  }
)

const actionsSetSelectedReposForOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })

router.put(
  "actionsSetSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<any>(actionsSetSelectedReposForOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsSetSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedReposForOrgSecret
  }
)

const actionsAddSelectedRepoToOrgSecretParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    secret_name: joi.string().required(),
    repository_id: joi.number().required(),
  })

router.put(
  "actionsAddSelectedRepoToOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<any>(actionsAddSelectedRepoToOrgSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsAddSelectedRepoToOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelectedRepoToOrgSecret
  }
)

const actionsRemoveSelectedRepoFromOrgSecretParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    secret_name: joi.string().required(),
    repository_id: joi.number().required(),
  })

router.delete(
  "actionsRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<any>(
    actionsRemoveSelectedRepoFromOrgSecretParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret
  }
)

const orgsListBlockedUsersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "orgsListBlockedUsers",
  "/orgs/:org/blocks",
  paramValidationFactory<any>(orgsListBlockedUsersParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListBlockedUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListBlockedUsers
  }
)

const orgsCheckBlockedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.get(
  "orgsCheckBlockedUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<any>(orgsCheckBlockedUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsCheckBlockedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckBlockedUser
  }
)

const orgsBlockUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.put(
  "orgsBlockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<any>(orgsBlockUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsBlockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsBlockUser
  }
)

const orgsUnblockUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.delete(
  "orgsUnblockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<any>(orgsUnblockUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsUnblockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUnblockUser
  }
)

const orgsListSamlSsoAuthorizationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "orgsListSamlSsoAuthorizations",
  "/orgs/:org/credential-authorizations",
  paramValidationFactory<any>(orgsListSamlSsoAuthorizationsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListSamlSsoAuthorizations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListSamlSsoAuthorizations
  }
)

const orgsRemoveSamlSsoAuthorizationParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    credential_id: joi.number().required(),
  })

router.delete(
  "orgsRemoveSamlSsoAuthorization",
  "/orgs/:org/credential-authorizations/:credentialId",
  paramValidationFactory<any>(orgsRemoveSamlSsoAuthorizationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsRemoveSamlSsoAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveSamlSsoAuthorization
  }
)

const activityListPublicOrgEventsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const activityListPublicOrgEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListPublicOrgEvents",
  "/orgs/:org/events",
  paramValidationFactory<any>(activityListPublicOrgEventsParamSchema),
  queryValidationFactory<any>(activityListPublicOrgEventsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListPublicOrgEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicOrgEvents
  }
)

const orgsListWebhooksParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListWebhooksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListWebhooks",
  "/orgs/:org/hooks",
  paramValidationFactory<any>(orgsListWebhooksParamSchema),
  queryValidationFactory<any>(orgsListWebhooksQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListWebhooks
  }
)

const orgsCreateWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "orgsCreateWebhook",
  "/orgs/:org/hooks",
  paramValidationFactory<any>(orgsCreateWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateWebhook
  }
)

const orgsGetWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })

router.get(
  "orgsGetWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<any>(orgsGetWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetWebhook
  }
)

const orgsUpdateWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })

router.patch(
  "orgsUpdateWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<any>(orgsUpdateWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateWebhook
  }
)

const orgsDeleteWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })

router.delete(
  "orgsDeleteWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<any>(orgsDeleteWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsDeleteWebhook
  }
)

const orgsPingWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })

router.post(
  "orgsPingWebhook",
  "/orgs/:org/hooks/:hookId/pings",
  paramValidationFactory<any>(orgsPingWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsPingWebhook
  }
)

const appsGetOrgInstallationParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "appsGetOrgInstallation",
  "/orgs/:org/installation",
  paramValidationFactory<any>(appsGetOrgInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetOrgInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetOrgInstallation
  }
)

const orgsListAppInstallationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListAppInstallationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListAppInstallations",
  "/orgs/:org/installations",
  paramValidationFactory<any>(orgsListAppInstallationsParamSchema),
  queryValidationFactory<any>(orgsListAppInstallationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListAppInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListAppInstallations
  }
)

const interactionsGetRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "interactionsGetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<any>(interactionsGetRestrictionsForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsGetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForOrg
  }
)

const interactionsSetRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.put(
  "interactionsSetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<any>(interactionsSetRestrictionsForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsSetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForOrg
  }
)

const interactionsRemoveRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.delete(
  "interactionsRemoveRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<any>(interactionsRemoveRestrictionsForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForOrg
  }
)

const orgsListPendingInvitationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListPendingInvitationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListPendingInvitations",
  "/orgs/:org/invitations",
  paramValidationFactory<any>(orgsListPendingInvitationsParamSchema),
  queryValidationFactory<any>(orgsListPendingInvitationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListPendingInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPendingInvitations
  }
)

const orgsCreateInvitationParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "orgsCreateInvitation",
  "/orgs/:org/invitations",
  paramValidationFactory<any>(orgsCreateInvitationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsCreateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateInvitation
  }
)

const orgsListInvitationTeamsParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    invitation_id: joi.number().required(),
  })

const orgsListInvitationTeamsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListInvitationTeams",
  "/orgs/:org/invitations/:invitationId/teams",
  paramValidationFactory<any>(orgsListInvitationTeamsParamSchema),
  queryValidationFactory<any>(orgsListInvitationTeamsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListInvitationTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListInvitationTeams
  }
)

const issuesListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const issuesListForOrgQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesListForOrg",
  "/orgs/:org/issues",
  paramValidationFactory<any>(issuesListForOrgParamSchema),
  queryValidationFactory<any>(issuesListForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForOrg
  }
)

const orgsListMembersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListMembersQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    role: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "orgsListMembers",
  "/orgs/:org/members",
  paramValidationFactory<any>(orgsListMembersParamSchema),
  queryValidationFactory<any>(orgsListMembersQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembers
  }
)

const orgsCheckMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.get(
  "orgsCheckMembershipForUser",
  "/orgs/:org/members/:username",
  paramValidationFactory<any>(orgsCheckMembershipForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsCheckMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckMembershipForUser
  }
)

const orgsRemoveMemberParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.delete(
  "orgsRemoveMember",
  "/orgs/:org/members/:username",
  paramValidationFactory<any>(orgsRemoveMemberParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsRemoveMember

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMember
  }
)

const orgsGetMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.get(
  "orgsGetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<any>(orgsGetMembershipForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsGetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForUser
  }
)

const orgsSetMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.put(
  "orgsSetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<any>(orgsSetMembershipForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsSetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetMembershipForUser
  }
)

const orgsRemoveMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.delete(
  "orgsRemoveMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<any>(orgsRemoveMembershipForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsRemoveMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMembershipForUser
  }
)

const migrationsStartForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "migrationsStartForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<any>(migrationsStartForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsStartForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForOrg
  }
)

const migrationsListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const migrationsListForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "migrationsListForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<any>(migrationsListForOrgParamSchema),
  queryValidationFactory<any>(migrationsListForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForOrg
  }
)

const migrationsGetStatusForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })

router.get(
  "migrationsGetStatusForOrg",
  "/orgs/:org/migrations/:migrationId",
  paramValidationFactory<any>(migrationsGetStatusForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetStatusForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForOrg
  }
)

const migrationsDownloadArchiveForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })

router.get(
  "migrationsDownloadArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<any>(migrationsDownloadArchiveForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsDownloadArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDownloadArchiveForOrg
  }
)

const migrationsDeleteArchiveForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })

router.delete(
  "migrationsDeleteArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<any>(migrationsDeleteArchiveForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsDeleteArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForOrg
  }
)

const migrationsUnlockRepoForOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    migration_id: joi.number().required(),
    repo_name: joi.string().required(),
  })

router.delete(
  "migrationsUnlockRepoForOrg",
  "/orgs/:org/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<any>(migrationsUnlockRepoForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsUnlockRepoForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForOrg
  }
)

const migrationsListReposForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })

const migrationsListReposForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "migrationsListReposForOrg",
  "/orgs/:org/migrations/:migrationId/repositories",
  paramValidationFactory<any>(migrationsListReposForOrgParamSchema),
  queryValidationFactory<any>(migrationsListReposForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsListReposForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForOrg
  }
)

const orgsListOutsideCollaboratorsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListOutsideCollaboratorsQuerySchema = joi
  .object()
  .keys({ filter: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListOutsideCollaborators",
  "/orgs/:org/outside_collaborators",
  paramValidationFactory<any>(orgsListOutsideCollaboratorsParamSchema),
  queryValidationFactory<any>(orgsListOutsideCollaboratorsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListOutsideCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListOutsideCollaborators
  }
)

const orgsRemoveOutsideCollaboratorParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.delete(
  "orgsRemoveOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<any>(orgsRemoveOutsideCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsRemoveOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveOutsideCollaborator
  }
)

const orgsConvertMemberToOutsideCollaboratorParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.put(
  "orgsConvertMemberToOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<any>(
    orgsConvertMemberToOutsideCollaboratorParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-orgsConvertMemberToOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsConvertMemberToOutsideCollaborator
  }
)

const projectsListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const projectsListForOrgQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "projectsListForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<any>(projectsListForOrgParamSchema),
  queryValidationFactory<any>(projectsListForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForOrg
  }
)

const projectsCreateForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "projectsCreateForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<any>(projectsCreateForOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsCreateForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForOrg
  }
)

const orgsListPublicMembersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const orgsListPublicMembersQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListPublicMembers",
  "/orgs/:org/public_members",
  paramValidationFactory<any>(orgsListPublicMembersParamSchema),
  queryValidationFactory<any>(orgsListPublicMembersQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListPublicMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPublicMembers
  }
)

const orgsCheckPublicMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.get(
  "orgsCheckPublicMembershipForUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<any>(orgsCheckPublicMembershipForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsCheckPublicMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckPublicMembershipForUser
  }
)

const orgsSetPublicMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.put(
  "orgsSetPublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<any>(
    orgsSetPublicMembershipForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser
  }
)

const orgsRemovePublicMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })

router.delete(
  "orgsRemovePublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<any>(
    orgsRemovePublicMembershipForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser
  }
)

const reposListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const reposListForOrgQuerySchema = joi
  .object()
  .keys({
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListForOrg",
  "/orgs/:org/repos",
  paramValidationFactory<any>(reposListForOrgParamSchema),
  queryValidationFactory<any>(reposListForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForOrg
  }
)

const reposCreateInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "reposCreateInOrg",
  "/orgs/:org/repos",
  paramValidationFactory<any>(reposCreateInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateInOrg
  }
)

const teamsListIdPGroupsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const teamsListIdPGroupsForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListIdPGroupsForOrg",
  "/orgs/:org/team-sync/groups",
  paramValidationFactory<any>(teamsListIdPGroupsForOrgParamSchema),
  queryValidationFactory<any>(teamsListIdPGroupsForOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListIdPGroupsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsForOrg
  }
)

const teamsListParamSchema = joi.object().keys({ org: joi.string().required() })

const teamsListQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsList",
  "/orgs/:org/teams",
  paramValidationFactory<any>(teamsListParamSchema),
  queryValidationFactory<any>(teamsListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsList
  }
)

const teamsCreateParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "teamsCreate",
  "/orgs/:org/teams",
  paramValidationFactory<any>(teamsCreateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreate
  }
)

const teamsGetByNameParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.get(
  "teamsGetByName",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<any>(teamsGetByNameParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetByName

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetByName
  }
)

const teamsUpdateInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.patch(
  "teamsUpdateInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<any>(teamsUpdateInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateInOrg
  }
)

const teamsDeleteInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.delete(
  "teamsDeleteInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<any>(teamsDeleteInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteInOrg
  }
)

const teamsListDiscussionsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListDiscussionsInOrgQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListDiscussionsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<any>(teamsListDiscussionsInOrgParamSchema),
  queryValidationFactory<any>(teamsListDiscussionsInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListDiscussionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsInOrg
  }
)

const teamsCreateDiscussionInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.post(
  "teamsCreateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<any>(teamsCreateDiscussionInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionInOrg
  }
)

const teamsGetDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

router.get(
  "teamsGetDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsGetDiscussionInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionInOrg
  }
)

const teamsUpdateDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

router.patch(
  "teamsUpdateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsUpdateDiscussionInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionInOrg
  }
)

const teamsDeleteDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

router.delete(
  "teamsDeleteDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsDeleteDiscussionInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionInOrg
  }
)

const teamsListDiscussionCommentsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

const teamsListDiscussionCommentsInOrgQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListDiscussionCommentsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<any>(teamsListDiscussionCommentsInOrgParamSchema),
  queryValidationFactory<any>(teamsListDiscussionCommentsInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListDiscussionCommentsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsInOrg
  }
)

const teamsCreateDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

router.post(
  "teamsCreateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<any>(teamsCreateDiscussionCommentInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentInOrg
  }
)

const teamsGetDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.get(
  "teamsGetDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsGetDiscussionCommentInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentInOrg
  }
)

const teamsUpdateDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.patch(
  "teamsUpdateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsUpdateDiscussionCommentInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentInOrg
  }
)

const teamsDeleteDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.delete(
  "teamsDeleteDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsDeleteDiscussionCommentInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentInOrg
  }
)

const reactionsListForTeamDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

const reactionsListForTeamDiscussionCommentInOrgQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<any>(
    reactionsListForTeamDiscussionCommentInOrgParamSchema
  ),
  queryValidationFactory<any>(
    reactionsListForTeamDiscussionCommentInOrgQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentInOrg
  }
)

const reactionsCreateForTeamDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.post(
  "reactionsCreateForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<any>(
    reactionsCreateForTeamDiscussionCommentInOrgParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg
  }
)

const reactionsDeleteForTeamDiscussionCommentParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForTeamDiscussionComment",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId",
  paramValidationFactory<any>(
    reactionsDeleteForTeamDiscussionCommentParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussionComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussionComment
  }
)

const reactionsListForTeamDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

const reactionsListForTeamDiscussionInOrgQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<any>(reactionsListForTeamDiscussionInOrgParamSchema),
  queryValidationFactory<any>(reactionsListForTeamDiscussionInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionInOrg
  }
)

const reactionsCreateForTeamDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })

router.post(
  "reactionsCreateForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<any>(reactionsCreateForTeamDiscussionInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionInOrg
  }
)

const reactionsDeleteForTeamDiscussionParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForTeamDiscussion",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteForTeamDiscussionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussion

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussion
  }
)

const teamsListPendingInvitationsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListPendingInvitationsInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListPendingInvitationsInOrg",
  "/orgs/:org/teams/:teamSlug/invitations",
  paramValidationFactory<any>(teamsListPendingInvitationsInOrgParamSchema),
  queryValidationFactory<any>(teamsListPendingInvitationsInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListPendingInvitationsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsInOrg
  }
)

const teamsListMembersInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListMembersInOrgQuerySchema = joi
  .object()
  .keys({ role: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListMembersInOrg",
  "/orgs/:org/teams/:teamSlug/members",
  paramValidationFactory<any>(teamsListMembersInOrgParamSchema),
  queryValidationFactory<any>(teamsListMembersInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListMembersInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersInOrg
  }
)

const teamsGetMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })

router.get(
  "teamsGetMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<any>(teamsGetMembershipForUserInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserInOrg
  }
)

const teamsAddOrUpdateMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })

router.put(
  "teamsAddOrUpdateMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<any>(
    teamsAddOrUpdateMembershipForUserInOrgParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg
  }
)

const teamsRemoveMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })

router.delete(
  "teamsRemoveMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<any>(teamsRemoveMembershipForUserInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserInOrg
  }
)

const teamsListProjectsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListProjectsInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListProjectsInOrg",
  "/orgs/:org/teams/:teamSlug/projects",
  paramValidationFactory<any>(teamsListProjectsInOrgParamSchema),
  queryValidationFactory<any>(teamsListProjectsInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListProjectsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsInOrg
  }
)

const teamsCheckPermissionsForProjectInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })

router.get(
  "teamsCheckPermissionsForProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<any>(teamsCheckPermissionsForProjectInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectInOrg
  }
)

const teamsAddOrUpdateProjectPermissionsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })

router.put(
  "teamsAddOrUpdateProjectPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<any>(
    teamsAddOrUpdateProjectPermissionsInOrgParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg
  }
)

const teamsRemoveProjectInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })

router.delete(
  "teamsRemoveProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<any>(teamsRemoveProjectInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectInOrg
  }
)

const teamsListReposInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListReposInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListReposInOrg",
  "/orgs/:org/teams/:teamSlug/repos",
  paramValidationFactory<any>(teamsListReposInOrgParamSchema),
  queryValidationFactory<any>(teamsListReposInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListReposInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposInOrg
  }
)

const teamsCheckPermissionsForRepoInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.get(
  "teamsCheckPermissionsForRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<any>(teamsCheckPermissionsForRepoInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoInOrg
  }
)

const teamsAddOrUpdateRepoPermissionsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.put(
  "teamsAddOrUpdateRepoPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<any>(teamsAddOrUpdateRepoPermissionsInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg
  }
)

const teamsRemoveRepoInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.delete(
  "teamsRemoveRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<any>(teamsRemoveRepoInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoInOrg
  }
)

const teamsListIdPGroupsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.get(
  "teamsListIdPGroupsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  paramValidationFactory<any>(teamsListIdPGroupsInOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListIdPGroupsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsInOrg
  }
)

const teamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  paramValidationFactory<any>(
    teamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsInOrg
  }
)

const teamsListChildInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })

const teamsListChildInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListChildInOrg",
  "/orgs/:org/teams/:teamSlug/teams",
  paramValidationFactory<any>(teamsListChildInOrgParamSchema),
  queryValidationFactory<any>(teamsListChildInOrgQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListChildInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildInOrg
  }
)

const projectsGetCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })

router.get(
  "projectsGetCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<any>(projectsGetCardParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsGetCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetCard
  }
)

const projectsUpdateCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })

router.patch(
  "projectsUpdateCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<any>(projectsUpdateCardParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsUpdateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateCard
  }
)

const projectsDeleteCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })

router.delete(
  "projectsDeleteCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<any>(projectsDeleteCardParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsDeleteCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteCard
  }
)

const projectsMoveCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })

router.post(
  "projectsMoveCard",
  "/projects/columns/cards/:cardId/moves",
  paramValidationFactory<any>(projectsMoveCardParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsMoveCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveCard
  }
)

const projectsGetColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

router.get(
  "projectsGetColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<any>(projectsGetColumnParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsGetColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetColumn
  }
)

const projectsUpdateColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

router.patch(
  "projectsUpdateColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<any>(projectsUpdateColumnParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsUpdateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateColumn
  }
)

const projectsDeleteColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

router.delete(
  "projectsDeleteColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<any>(projectsDeleteColumnParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsDeleteColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteColumn
  }
)

const projectsListCardsParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

const projectsListCardsQuerySchema = joi
  .object()
  .keys({
    archived_state: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "projectsListCards",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<any>(projectsListCardsParamSchema),
  queryValidationFactory<any>(projectsListCardsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListCards

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCards
  }
)

const projectsCreateCardParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

router.post(
  "projectsCreateCard",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<any>(projectsCreateCardParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsCreateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateCard
  }
)

const projectsMoveColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })

router.post(
  "projectsMoveColumn",
  "/projects/columns/:columnId/moves",
  paramValidationFactory<any>(projectsMoveColumnParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsMoveColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveColumn
  }
)

const projectsGetParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

router.get(
  "projectsGet",
  "/projects/:projectId",
  paramValidationFactory<any>(projectsGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGet
  }
)

const projectsUpdateParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

router.patch(
  "projectsUpdate",
  "/projects/:projectId",
  paramValidationFactory<any>(projectsUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdate
  }
)

const projectsDeleteParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

router.delete(
  "projectsDelete",
  "/projects/:projectId",
  paramValidationFactory<any>(projectsDeleteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDelete
  }
)

const projectsListCollaboratorsParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

const projectsListCollaboratorsQuerySchema = joi
  .object()
  .keys({
    affiliation: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "projectsListCollaborators",
  "/projects/:projectId/collaborators",
  paramValidationFactory<any>(projectsListCollaboratorsParamSchema),
  queryValidationFactory<any>(projectsListCollaboratorsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCollaborators
  }
)

const projectsAddCollaboratorParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })

router.put(
  "projectsAddCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<any>(projectsAddCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsAddCollaborator
  }
)

const projectsRemoveCollaboratorParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })

router.delete(
  "projectsRemoveCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<any>(projectsRemoveCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsRemoveCollaborator
  }
)

const projectsGetPermissionForUserParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })

router.get(
  "projectsGetPermissionForUser",
  "/projects/:projectId/collaborators/:username/permission",
  paramValidationFactory<any>(projectsGetPermissionForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsGetPermissionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetPermissionForUser
  }
)

const projectsListColumnsParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

const projectsListColumnsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "projectsListColumns",
  "/projects/:projectId/columns",
  paramValidationFactory<any>(projectsListColumnsParamSchema),
  queryValidationFactory<any>(projectsListColumnsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListColumns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListColumns
  }
)

const projectsCreateColumnParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })

router.post(
  "projectsCreateColumn",
  "/projects/:projectId/columns",
  paramValidationFactory<any>(projectsCreateColumnParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsCreateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateColumn
  }
)

router.get("rateLimitGet", "/rate_limit", async (ctx, next) => {
  //region safe-edit-region-rateLimitGet

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-rateLimitGet
})

const reactionsDeleteLegacyParamSchema = joi
  .object()
  .keys({ reaction_id: joi.number().required() })

router.delete(
  "reactionsDeleteLegacy",
  "/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteLegacy
  }
)

const reposGetParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGet",
  "/repos/:owner/:repo",
  paramValidationFactory<any>(reposGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGet
  }
)

const reposUpdateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.patch(
  "reposUpdate",
  "/repos/:owner/:repo",
  paramValidationFactory<any>(reposUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdate
  }
)

const reposDeleteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "reposDelete",
  "/repos/:owner/:repo",
  paramValidationFactory<any>(reposDeleteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDelete
  }
)

const actionsListArtifactsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const actionsListArtifactsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListArtifactsForRepo",
  "/repos/:owner/:repo/actions/artifacts",
  paramValidationFactory<any>(actionsListArtifactsForRepoParamSchema),
  queryValidationFactory<any>(actionsListArtifactsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListArtifactsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListArtifactsForRepo
  }
)

const actionsGetArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
  })

router.get(
  "actionsGetArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<any>(actionsGetArtifactParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetArtifact
  }
)

const actionsDeleteArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
  })

router.delete(
  "actionsDeleteArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<any>(actionsDeleteArtifactParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteArtifact
  }
)

const actionsDownloadArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
    archive_format: joi.string().required(),
  })

router.get(
  "actionsDownloadArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat",
  paramValidationFactory<any>(actionsDownloadArtifactParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDownloadArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadArtifact
  }
)

const actionsGetJobForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    job_id: joi.number().required(),
  })

router.get(
  "actionsGetJobForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId",
  paramValidationFactory<any>(actionsGetJobForWorkflowRunParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetJobForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetJobForWorkflowRun
  }
)

const actionsDownloadJobLogsForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    job_id: joi.number().required(),
  })

router.get(
  "actionsDownloadJobLogsForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId/logs",
  paramValidationFactory<any>(actionsDownloadJobLogsForWorkflowRunParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDownloadJobLogsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadJobLogsForWorkflowRun
  }
)

const actionsListSelfHostedRunnersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const actionsListSelfHostedRunnersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListSelfHostedRunnersForRepo",
  "/repos/:owner/:repo/actions/runners",
  paramValidationFactory<any>(actionsListSelfHostedRunnersForRepoParamSchema),
  queryValidationFactory<any>(actionsListSelfHostedRunnersForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForRepo
  }
)

const actionsListRunnerApplicationsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "actionsListRunnerApplicationsForRepo",
  "/repos/:owner/:repo/actions/runners/downloads",
  paramValidationFactory<any>(actionsListRunnerApplicationsForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListRunnerApplicationsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForRepo
  }
)

const actionsCreateRegistrationTokenForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "actionsCreateRegistrationTokenForRepo",
  "/repos/:owner/:repo/actions/runners/registration-token",
  paramValidationFactory<any>(actionsCreateRegistrationTokenForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForRepo
  }
)

const actionsCreateRemoveTokenForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "actionsCreateRemoveTokenForRepo",
  "/repos/:owner/:repo/actions/runners/remove-token",
  paramValidationFactory<any>(actionsCreateRemoveTokenForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateRemoveTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForRepo
  }
)

const actionsGetSelfHostedRunnerForRepoParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    runner_id: joi.number().required(),
  })

router.get(
  "actionsGetSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<any>(actionsGetSelfHostedRunnerForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForRepo
  }
)

const actionsDeleteSelfHostedRunnerFromRepoParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    runner_id: joi.number().required(),
  })

router.delete(
  "actionsDeleteSelfHostedRunnerFromRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<any>(actionsDeleteSelfHostedRunnerFromRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo
  }
)

const actionsListWorkflowRunsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const actionsListWorkflowRunsForRepoQuerySchema = joi
  .object()
  .keys({
    actor: joi.string(),
    branch: joi.string(),
    event: joi.string(),
    status: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "actionsListWorkflowRunsForRepo",
  "/repos/:owner/:repo/actions/runs",
  paramValidationFactory<any>(actionsListWorkflowRunsForRepoParamSchema),
  queryValidationFactory<any>(actionsListWorkflowRunsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListWorkflowRunsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunsForRepo
  }
)

const actionsGetWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.get(
  "actionsGetWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId",
  paramValidationFactory<any>(actionsGetWorkflowRunParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRun
  }
)

const actionsListWorkflowRunArtifactsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

const actionsListWorkflowRunArtifactsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListWorkflowRunArtifacts",
  "/repos/:owner/:repo/actions/runs/:runId/artifacts",
  paramValidationFactory<any>(actionsListWorkflowRunArtifactsParamSchema),
  queryValidationFactory<any>(actionsListWorkflowRunArtifactsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListWorkflowRunArtifacts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunArtifacts
  }
)

const actionsCancelWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.post(
  "actionsCancelWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/cancel",
  paramValidationFactory<any>(actionsCancelWorkflowRunParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCancelWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCancelWorkflowRun
  }
)

const actionsListJobsForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

const actionsListJobsForWorkflowRunQuerySchema = joi
  .object()
  .keys({ filter: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListJobsForWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/jobs",
  paramValidationFactory<any>(actionsListJobsForWorkflowRunParamSchema),
  queryValidationFactory<any>(actionsListJobsForWorkflowRunQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListJobsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListJobsForWorkflowRun
  }
)

const actionsDownloadWorkflowRunLogsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.get(
  "actionsDownloadWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<any>(actionsDownloadWorkflowRunLogsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDownloadWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadWorkflowRunLogs
  }
)

const actionsDeleteWorkflowRunLogsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.delete(
  "actionsDeleteWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<any>(actionsDeleteWorkflowRunLogsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteWorkflowRunLogs
  }
)

const actionsReRunWorkflowParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.post(
  "actionsReRunWorkflow",
  "/repos/:owner/:repo/actions/runs/:runId/rerun",
  paramValidationFactory<any>(actionsReRunWorkflowParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsReRunWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReRunWorkflow
  }
)

const actionsGetWorkflowRunUsageParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })

router.get(
  "actionsGetWorkflowRunUsage",
  "/repos/:owner/:repo/actions/runs/:runId/timing",
  paramValidationFactory<any>(actionsGetWorkflowRunUsageParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetWorkflowRunUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRunUsage
  }
)

const actionsListRepoSecretsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const actionsListRepoSecretsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListRepoSecrets",
  "/repos/:owner/:repo/actions/secrets",
  paramValidationFactory<any>(actionsListRepoSecretsParamSchema),
  queryValidationFactory<any>(actionsListRepoSecretsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListRepoSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoSecrets
  }
)

const actionsGetRepoPublicKeyParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "actionsGetRepoPublicKey",
  "/repos/:owner/:repo/actions/secrets/public-key",
  paramValidationFactory<any>(actionsGetRepoPublicKeyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetRepoPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoPublicKey
  }
)

const actionsGetRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })

router.get(
  "actionsGetRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsGetRepoSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoSecret
  }
)

const actionsCreateOrUpdateRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })

router.put(
  "actionsCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsCreateOrUpdateRepoSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsCreateOrUpdateRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateRepoSecret
  }
)

const actionsDeleteRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })

router.delete(
  "actionsDeleteRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<any>(actionsDeleteRepoSecretParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsDeleteRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteRepoSecret
  }
)

const actionsListRepoWorkflowsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const actionsListRepoWorkflowsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "actionsListRepoWorkflows",
  "/repos/:owner/:repo/actions/workflows",
  paramValidationFactory<any>(actionsListRepoWorkflowsParamSchema),
  queryValidationFactory<any>(actionsListRepoWorkflowsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListRepoWorkflows

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoWorkflows
  }
)

const actionsGetWorkflowParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })

router.get(
  "actionsGetWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId",
  paramValidationFactory<any>(actionsGetWorkflowParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflow
  }
)

const actionsListWorkflowRunsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })

const actionsListWorkflowRunsQuerySchema = joi
  .object()
  .keys({
    actor: joi.string(),
    branch: joi.string(),
    event: joi.string(),
    status: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "actionsListWorkflowRuns",
  "/repos/:owner/:repo/actions/workflows/:workflowId/runs",
  paramValidationFactory<any>(actionsListWorkflowRunsParamSchema),
  queryValidationFactory<any>(actionsListWorkflowRunsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsListWorkflowRuns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRuns
  }
)

const actionsGetWorkflowUsageParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })

router.get(
  "actionsGetWorkflowUsage",
  "/repos/:owner/:repo/actions/workflows/:workflowId/timing",
  paramValidationFactory<any>(actionsGetWorkflowUsageParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-actionsGetWorkflowUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowUsage
  }
)

const issuesListAssigneesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListAssigneesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListAssignees",
  "/repos/:owner/:repo/assignees",
  paramValidationFactory<any>(issuesListAssigneesParamSchema),
  queryValidationFactory<any>(issuesListAssigneesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListAssignees
  }
)

const issuesCheckUserCanBeAssignedParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    assignee: joi.string().required(),
  })

router.get(
  "issuesCheckUserCanBeAssigned",
  "/repos/:owner/:repo/assignees/:assignee",
  paramValidationFactory<any>(issuesCheckUserCanBeAssignedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesCheckUserCanBeAssigned

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCheckUserCanBeAssigned
  }
)

const reposEnableAutomatedSecurityFixesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "reposEnableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<any>(reposEnableAutomatedSecurityFixesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposEnableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableAutomatedSecurityFixes
  }
)

const reposDisableAutomatedSecurityFixesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "reposDisableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<any>(reposDisableAutomatedSecurityFixesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDisableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableAutomatedSecurityFixes
  }
)

const reposListBranchesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListBranchesQuerySchema = joi
  .object()
  .keys({
    protected: joi.boolean(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListBranches",
  "/repos/:owner/:repo/branches",
  paramValidationFactory<any>(reposListBranchesParamSchema),
  queryValidationFactory<any>(reposListBranchesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListBranches

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranches
  }
)

const reposGetBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetBranch",
  "/repos/:owner/:repo/branches/:branch",
  paramValidationFactory<any>(reposGetBranchParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranch
  }
)

const reposGetBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<any>(reposGetBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranchProtection
  }
)

const reposUpdateBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.put(
  "reposUpdateBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<any>(reposUpdateBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateBranchProtection
  }
)

const reposDeleteBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposDeleteBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<any>(reposDeleteBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteBranchProtection
  }
)

const reposGetAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<any>(reposGetAdminBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAdminBranchProtection
  }
)

const reposSetAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposSetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<any>(reposSetAdminBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposSetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAdminBranchProtection
  }
)

const reposDeleteAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposDeleteAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<any>(reposDeleteAdminBranchProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAdminBranchProtection
  }
)

const reposGetPullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetPullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<any>(reposGetPullRequestReviewProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetPullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPullRequestReviewProtection
  }
)

const reposUpdatePullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.patch(
  "reposUpdatePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<any>(
    reposUpdatePullRequestReviewProtectionParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdatePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdatePullRequestReviewProtection
  }
)

const reposDeletePullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposDeletePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<any>(
    reposDeletePullRequestReviewProtectionParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposDeletePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePullRequestReviewProtection
  }
)

const reposGetCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<any>(reposGetCommitSignatureProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitSignatureProtection
  }
)

const reposCreateCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposCreateCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<any>(reposCreateCommitSignatureProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitSignatureProtection
  }
)

const reposDeleteCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposDeleteCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<any>(reposDeleteCommitSignatureProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitSignatureProtection
  }
)

const reposGetStatusChecksProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetStatusChecksProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<any>(reposGetStatusChecksProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetStatusChecksProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetStatusChecksProtection
  }
)

const reposUpdateStatusCheckPotectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.patch(
  "reposUpdateStatusCheckPotection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<any>(reposUpdateStatusCheckPotectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateStatusCheckPotection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateStatusCheckPotection
  }
)

const reposRemoveStatusCheckProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposRemoveStatusCheckProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<any>(reposRemoveStatusCheckProtectionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveStatusCheckProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckProtection
  }
)

const reposGetAllStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetAllStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<any>(reposGetAllStatusCheckContextsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetAllStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllStatusCheckContexts
  }
)

const reposSetStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.put(
  "reposSetStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<any>(reposSetStatusCheckContextsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposSetStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetStatusCheckContexts
  }
)

const reposAddStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposAddStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<any>(reposAddStatusCheckContextsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAddStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddStatusCheckContexts
  }
)

const reposRemoveStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposRemoveStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<any>(reposRemoveStatusCheckContextsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckContexts
  }
)

const reposGetAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<any>(reposGetAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAccessRestrictions
  }
)

const reposDeleteAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposDeleteAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<any>(reposDeleteAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAccessRestrictions
  }
)

const reposGetAppsWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetAppsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<any>(
    reposGetAppsWithAccessToProtectedBranchParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposGetAppsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAppsWithAccessToProtectedBranch
  }
)

const reposSetAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.put(
  "reposSetAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<any>(reposSetAppAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposSetAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAppAccessRestrictions
  }
)

const reposAddAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposAddAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<any>(reposAddAppAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAddAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddAppAccessRestrictions
  }
)

const reposRemoveAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposRemoveAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<any>(reposRemoveAppAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveAppAccessRestrictions
  }
)

const reposGetTeamsWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetTeamsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<any>(
    reposGetTeamsWithAccessToProtectedBranchParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposGetTeamsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTeamsWithAccessToProtectedBranch
  }
)

const reposSetTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.put(
  "reposSetTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<any>(reposSetTeamAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposSetTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetTeamAccessRestrictions
  }
)

const reposAddTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposAddTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<any>(reposAddTeamAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAddTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddTeamAccessRestrictions
  }
)

const reposRemoveTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposRemoveTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<any>(reposRemoveTeamAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveTeamAccessRestrictions
  }
)

const reposGetUsersWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.get(
  "reposGetUsersWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<any>(
    reposGetUsersWithAccessToProtectedBranchParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposGetUsersWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetUsersWithAccessToProtectedBranch
  }
)

const reposSetUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.put(
  "reposSetUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<any>(reposSetUserAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposSetUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetUserAccessRestrictions
  }
)

const reposAddUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.post(
  "reposAddUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<any>(reposAddUserAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAddUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddUserAccessRestrictions
  }
)

const reposRemoveUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })

router.delete(
  "reposRemoveUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<any>(reposRemoveUserAccessRestrictionsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveUserAccessRestrictions
  }
)

const checksCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "checksCreate",
  "/repos/:owner/:repo/check-runs",
  paramValidationFactory<any>(checksCreateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreate
  }
)

const checksUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })

router.patch(
  "checksUpdate",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<any>(checksUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksUpdate
  }
)

const checksGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })

router.get(
  "checksGet",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<any>(checksGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGet
  }
)

const checksListAnnotationsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })

const checksListAnnotationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "checksListAnnotations",
  "/repos/:owner/:repo/check-runs/:checkRunId/annotations",
  paramValidationFactory<any>(checksListAnnotationsParamSchema),
  queryValidationFactory<any>(checksListAnnotationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-checksListAnnotations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListAnnotations
  }
)

const checksCreateSuiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "checksCreateSuite",
  "/repos/:owner/:repo/check-suites",
  paramValidationFactory<any>(checksCreateSuiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksCreateSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreateSuite
  }
)

const checksSetSuitesPreferencesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.patch(
  "checksSetSuitesPreferences",
  "/repos/:owner/:repo/check-suites/preferences",
  paramValidationFactory<any>(checksSetSuitesPreferencesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksSetSuitesPreferences

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksSetSuitesPreferences
  }
)

const checksGetSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })

router.get(
  "checksGetSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId",
  paramValidationFactory<any>(checksGetSuiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksGetSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGetSuite
  }
)

const checksListForSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })

const checksListForSuiteQuerySchema = joi
  .object()
  .keys({
    check_name: joi.string(),
    status: joi.string(),
    filter: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "checksListForSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs",
  paramValidationFactory<any>(checksListForSuiteParamSchema),
  queryValidationFactory<any>(checksListForSuiteQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-checksListForSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForSuite
  }
)

const checksRerequestSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })

router.post(
  "checksRerequestSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest",
  paramValidationFactory<any>(checksRerequestSuiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-checksRerequestSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksRerequestSuite
  }
)

const codeScanningListAlertsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const codeScanningListAlertsForRepoQuerySchema = joi
  .object()
  .keys({ state: joi.string(), ref: joi.string() })

router.get(
  "codeScanningListAlertsForRepo",
  "/repos/:owner/:repo/code-scanning/alerts",
  paramValidationFactory<any>(codeScanningListAlertsForRepoParamSchema),
  queryValidationFactory<any>(codeScanningListAlertsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-codeScanningListAlertsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListAlertsForRepo
  }
)

const codeScanningGetAlertParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    alert_id: joi.number().required(),
  })

router.get(
  "codeScanningGetAlert",
  "/repos/:owner/:repo/code-scanning/alerts/:alertId",
  paramValidationFactory<any>(codeScanningGetAlertParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-codeScanningGetAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetAlert
  }
)

const reposListCollaboratorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListCollaboratorsQuerySchema = joi
  .object()
  .keys({
    affiliation: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListCollaborators",
  "/repos/:owner/:repo/collaborators",
  paramValidationFactory<any>(reposListCollaboratorsParamSchema),
  queryValidationFactory<any>(reposListCollaboratorsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCollaborators
  }
)

const reposCheckCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })

router.get(
  "reposCheckCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<any>(reposCheckCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCheckCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckCollaborator
  }
)

const reposAddCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })

router.put(
  "reposAddCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<any>(reposAddCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddCollaborator
  }
)

const reposRemoveCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })

router.delete(
  "reposRemoveCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<any>(reposRemoveCollaboratorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveCollaborator
  }
)

const reposGetCollaboratorPermissionLevelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })

router.get(
  "reposGetCollaboratorPermissionLevel",
  "/repos/:owner/:repo/collaborators/:username/permission",
  paramValidationFactory<any>(reposGetCollaboratorPermissionLevelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCollaboratorPermissionLevel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCollaboratorPermissionLevel
  }
)

const reposListCommitCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListCommitCommentsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListCommitCommentsForRepo",
  "/repos/:owner/:repo/comments",
  paramValidationFactory<any>(reposListCommitCommentsForRepoParamSchema),
  queryValidationFactory<any>(reposListCommitCommentsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListCommitCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitCommentsForRepo
  }
)

const reposGetCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.get(
  "reposGetCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<any>(reposGetCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitComment
  }
)

const reposUpdateCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.patch(
  "reposUpdateCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<any>(reposUpdateCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateCommitComment
  }
)

const reposDeleteCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.delete(
  "reposDeleteCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<any>(reposDeleteCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitComment
  }
)

const reactionsListForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

const reactionsListForCommitCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<any>(reactionsListForCommitCommentParamSchema),
  queryValidationFactory<any>(reactionsListForCommitCommentQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForCommitComment
  }
)

const reactionsCreateForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.post(
  "reactionsCreateForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<any>(reactionsCreateForCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForCommitComment
  }
)

const reactionsDeleteForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteForCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForCommitComment
  }
)

const reposListCommitsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListCommitsQuerySchema = joi
  .object()
  .keys({
    sha: joi.string(),
    path: joi.string(),
    author: joi.string(),
    since: joi.string(),
    until: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListCommits",
  "/repos/:owner/:repo/commits",
  paramValidationFactory<any>(reposListCommitsParamSchema),
  queryValidationFactory<any>(reposListCommitsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommits
  }
)

const reposListBranchesForHeadCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })

router.get(
  "reposListBranchesForHeadCommit",
  "/repos/:owner/:repo/commits/:commitSha/branches-where-head",
  paramValidationFactory<any>(reposListBranchesForHeadCommitParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListBranchesForHeadCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranchesForHeadCommit
  }
)

const reposListCommentsForCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })

const reposListCommentsForCommitQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListCommentsForCommit",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<any>(reposListCommentsForCommitParamSchema),
  queryValidationFactory<any>(reposListCommentsForCommitQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListCommentsForCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommentsForCommit
  }
)

const reposCreateCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })

router.post(
  "reposCreateCommitComment",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<any>(reposCreateCommitCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitComment
  }
)

const reposListPullRequestsAssociatedWithCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })

const reposListPullRequestsAssociatedWithCommitQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListPullRequestsAssociatedWithCommit",
  "/repos/:owner/:repo/commits/:commitSha/pulls",
  paramValidationFactory<any>(
    reposListPullRequestsAssociatedWithCommitParamSchema
  ),
  queryValidationFactory<any>(
    reposListPullRequestsAssociatedWithCommitQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposListPullRequestsAssociatedWithCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPullRequestsAssociatedWithCommit
  }
)

const reposGetCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

router.get(
  "reposGetCommit",
  "/repos/:owner/:repo/commits/:ref",
  paramValidationFactory<any>(reposGetCommitParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommit
  }
)

const checksListForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

const checksListForRefQuerySchema = joi
  .object()
  .keys({
    check_name: joi.string(),
    status: joi.string(),
    filter: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "checksListForRef",
  "/repos/:owner/:repo/commits/:ref/check-runs",
  paramValidationFactory<any>(checksListForRefParamSchema),
  queryValidationFactory<any>(checksListForRefQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-checksListForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForRef
  }
)

const checksListSuitesForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

const checksListSuitesForRefQuerySchema = joi
  .object()
  .keys({
    app_id: joi.number(),
    check_name: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "checksListSuitesForRef",
  "/repos/:owner/:repo/commits/:ref/check-suites",
  paramValidationFactory<any>(checksListSuitesForRefParamSchema),
  queryValidationFactory<any>(checksListSuitesForRefQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-checksListSuitesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListSuitesForRef
  }
)

const reposGetCombinedStatusForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

router.get(
  "reposGetCombinedStatusForRef",
  "/repos/:owner/:repo/commits/:ref/status",
  paramValidationFactory<any>(reposGetCombinedStatusForRefParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCombinedStatusForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCombinedStatusForRef
  }
)

const reposListCommitStatusesForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

const reposListCommitStatusesForRefQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListCommitStatusesForRef",
  "/repos/:owner/:repo/commits/:ref/statuses",
  paramValidationFactory<any>(reposListCommitStatusesForRefParamSchema),
  queryValidationFactory<any>(reposListCommitStatusesForRefQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListCommitStatusesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitStatusesForRef
  }
)

const codesOfConductGetForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "codesOfConductGetForRepo",
  "/repos/:owner/:repo/community/code_of_conduct",
  paramValidationFactory<any>(codesOfConductGetForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-codesOfConductGetForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetForRepo
  }
)

const reposGetCommunityProfileMetricsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetCommunityProfileMetrics",
  "/repos/:owner/:repo/community/profile",
  paramValidationFactory<any>(reposGetCommunityProfileMetricsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCommunityProfileMetrics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommunityProfileMetrics
  }
)

const reposCompareCommitsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    base: joi.string().required(),
    head: joi.string().required(),
  })

router.get(
  "reposCompareCommits",
  "/repos/:owner/:repo/compare/:base...:head",
  paramValidationFactory<any>(reposCompareCommitsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCompareCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCompareCommits
  }
)

const reposGetContentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })

const reposGetContentQuerySchema = joi.object().keys({ ref: joi.string() })

router.get(
  "reposGetContent",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<any>(reposGetContentParamSchema),
  queryValidationFactory<any>(reposGetContentQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetContent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContent
  }
)

const reposCreateOrUpdateFileContentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })

router.put(
  "reposCreateOrUpdateFileContents",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<any>(reposCreateOrUpdateFileContentsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateOrUpdateFileContents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateOrUpdateFileContents
  }
)

const reposDeleteFileParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })

router.delete(
  "reposDeleteFile",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<any>(reposDeleteFileParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteFile

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteFile
  }
)

const reposListContributorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListContributorsQuerySchema = joi
  .object()
  .keys({ anon: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reposListContributors",
  "/repos/:owner/:repo/contributors",
  paramValidationFactory<any>(reposListContributorsParamSchema),
  queryValidationFactory<any>(reposListContributorsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListContributors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListContributors
  }
)

const reposListDeploymentsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListDeploymentsQuerySchema = joi
  .object()
  .keys({
    sha: joi.string(),
    ref: joi.string(),
    task: joi.string(),
    environment: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListDeployments",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<any>(reposListDeploymentsParamSchema),
  queryValidationFactory<any>(reposListDeploymentsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListDeployments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployments
  }
)

const reposCreateDeploymentParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateDeployment",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<any>(reposCreateDeploymentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployment
  }
)

const reposGetDeploymentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })

router.get(
  "reposGetDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<any>(reposGetDeploymentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployment
  }
)

const reposDeleteDeploymentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })

router.delete(
  "reposDeleteDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<any>(reposDeleteDeploymentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployment
  }
)

const reposListDeploymentStatusesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })

const reposListDeploymentStatusesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListDeploymentStatuses",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<any>(reposListDeploymentStatusesParamSchema),
  queryValidationFactory<any>(reposListDeploymentStatusesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListDeploymentStatuses

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeploymentStatuses
  }
)

const reposCreateDeploymentStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })

router.post(
  "reposCreateDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<any>(reposCreateDeploymentStatusParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeploymentStatus
  }
)

const reposGetDeploymentStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
    status_id: joi.number().required(),
  })

router.get(
  "reposGetDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId",
  paramValidationFactory<any>(reposGetDeploymentStatusParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeploymentStatus
  }
)

const reposCreateDispatchEventParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateDispatchEvent",
  "/repos/:owner/:repo/dispatches",
  paramValidationFactory<any>(reposCreateDispatchEventParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateDispatchEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDispatchEvent
  }
)

const activityListRepoEventsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const activityListRepoEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListRepoEvents",
  "/repos/:owner/:repo/events",
  paramValidationFactory<any>(activityListRepoEventsParamSchema),
  queryValidationFactory<any>(activityListRepoEventsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListRepoEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoEvents
  }
)

const reposListForksParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListForksQuerySchema = joi
  .object()
  .keys({ sort: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reposListForks",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<any>(reposListForksParamSchema),
  queryValidationFactory<any>(reposListForksQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForks
  }
)

const reposCreateForkParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateFork",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<any>(reposCreateForkParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateFork
  }
)

const gitCreateBlobParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "gitCreateBlob",
  "/repos/:owner/:repo/git/blobs",
  paramValidationFactory<any>(gitCreateBlobParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitCreateBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateBlob
  }
)

const gitGetBlobParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    file_sha: joi.string().required(),
  })

router.get(
  "gitGetBlob",
  "/repos/:owner/:repo/git/blobs/:fileSha",
  paramValidationFactory<any>(gitGetBlobParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitGetBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetBlob
  }
)

const gitCreateCommitParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "gitCreateCommit",
  "/repos/:owner/:repo/git/commits",
  paramValidationFactory<any>(gitCreateCommitParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitCreateCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateCommit
  }
)

const gitGetCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })

router.get(
  "gitGetCommit",
  "/repos/:owner/:repo/git/commits/:commitSha",
  paramValidationFactory<any>(gitGetCommitParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetCommit
  }
)

const gitListMatchingRefsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

const gitListMatchingRefsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "gitListMatchingRefs",
  "/repos/:owner/:repo/git/matching-refs/:ref",
  paramValidationFactory<any>(gitListMatchingRefsParamSchema),
  queryValidationFactory<any>(gitListMatchingRefsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gitListMatchingRefs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitListMatchingRefs
  }
)

const gitGetRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

router.get(
  "gitGetRef",
  "/repos/:owner/:repo/git/ref/:ref",
  paramValidationFactory<any>(gitGetRefParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitGetRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetRef
  }
)

const gitCreateRefParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "gitCreateRef",
  "/repos/:owner/:repo/git/refs",
  paramValidationFactory<any>(gitCreateRefParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitCreateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateRef
  }
)

const gitUpdateRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

router.patch(
  "gitUpdateRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<any>(gitUpdateRefParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitUpdateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitUpdateRef
  }
)

const gitDeleteRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })

router.delete(
  "gitDeleteRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<any>(gitDeleteRefParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitDeleteRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitDeleteRef
  }
)

const gitCreateTagParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "gitCreateTag",
  "/repos/:owner/:repo/git/tags",
  paramValidationFactory<any>(gitCreateTagParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitCreateTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTag
  }
)

const gitGetTagParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tag_sha: joi.string().required(),
  })

router.get(
  "gitGetTag",
  "/repos/:owner/:repo/git/tags/:tagSha",
  paramValidationFactory<any>(gitGetTagParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitGetTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTag
  }
)

const gitCreateTreeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "gitCreateTree",
  "/repos/:owner/:repo/git/trees",
  paramValidationFactory<any>(gitCreateTreeParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-gitCreateTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTree
  }
)

const gitGetTreeParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tree_sha: joi.string().required(),
  })

const gitGetTreeQuerySchema = joi.object().keys({ recursive: joi.string() })

router.get(
  "gitGetTree",
  "/repos/:owner/:repo/git/trees/:treeSha",
  paramValidationFactory<any>(gitGetTreeParamSchema),
  queryValidationFactory<any>(gitGetTreeQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gitGetTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTree
  }
)

const reposListWebhooksParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListWebhooksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListWebhooks",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<any>(reposListWebhooksParamSchema),
  queryValidationFactory<any>(reposListWebhooksQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListWebhooks
  }
)

const reposCreateWebhookParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateWebhook",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<any>(reposCreateWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateWebhook
  }
)

const reposGetWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })

router.get(
  "reposGetWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<any>(reposGetWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetWebhook
  }
)

const reposUpdateWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })

router.patch(
  "reposUpdateWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<any>(reposUpdateWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateWebhook
  }
)

const reposDeleteWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })

router.delete(
  "reposDeleteWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<any>(reposDeleteWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteWebhook
  }
)

const reposPingWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })

router.post(
  "reposPingWebhook",
  "/repos/:owner/:repo/hooks/:hookId/pings",
  paramValidationFactory<any>(reposPingWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposPingWebhook
  }
)

const reposTestPushWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })

router.post(
  "reposTestPushWebhook",
  "/repos/:owner/:repo/hooks/:hookId/tests",
  paramValidationFactory<any>(reposTestPushWebhookParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposTestPushWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTestPushWebhook
  }
)

const migrationsStartImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "migrationsStartImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<any>(migrationsStartImportParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsStartImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartImport
  }
)

const migrationsGetImportStatusParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "migrationsGetImportStatus",
  "/repos/:owner/:repo/import",
  paramValidationFactory<any>(migrationsGetImportStatusParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetImportStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetImportStatus
  }
)

const migrationsUpdateImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.patch(
  "migrationsUpdateImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<any>(migrationsUpdateImportParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsUpdateImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUpdateImport
  }
)

const migrationsCancelImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "migrationsCancelImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<any>(migrationsCancelImportParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsCancelImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsCancelImport
  }
)

const migrationsGetCommitAuthorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const migrationsGetCommitAuthorsQuerySchema = joi
  .object()
  .keys({ since: joi.string() })

router.get(
  "migrationsGetCommitAuthors",
  "/repos/:owner/:repo/import/authors",
  paramValidationFactory<any>(migrationsGetCommitAuthorsParamSchema),
  queryValidationFactory<any>(migrationsGetCommitAuthorsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetCommitAuthors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetCommitAuthors
  }
)

const migrationsMapCommitAuthorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    author_id: joi.number().required(),
  })

router.patch(
  "migrationsMapCommitAuthor",
  "/repos/:owner/:repo/import/authors/:authorId",
  paramValidationFactory<any>(migrationsMapCommitAuthorParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsMapCommitAuthor

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsMapCommitAuthor
  }
)

const migrationsGetLargeFilesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "migrationsGetLargeFiles",
  "/repos/:owner/:repo/import/large_files",
  paramValidationFactory<any>(migrationsGetLargeFilesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetLargeFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetLargeFiles
  }
)

const migrationsSetLfsPreferenceParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.patch(
  "migrationsSetLfsPreference",
  "/repos/:owner/:repo/import/lfs",
  paramValidationFactory<any>(migrationsSetLfsPreferenceParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsSetLfsPreference

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsSetLfsPreference
  }
)

const appsGetRepoInstallationParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "appsGetRepoInstallation",
  "/repos/:owner/:repo/installation",
  paramValidationFactory<any>(appsGetRepoInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetRepoInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetRepoInstallation
  }
)

const interactionsGetRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "interactionsGetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<any>(interactionsGetRestrictionsForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsGetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForRepo
  }
)

const interactionsSetRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "interactionsSetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<any>(interactionsSetRestrictionsForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsSetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForRepo
  }
)

const interactionsRemoveRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "interactionsRemoveRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<any>(interactionsRemoveRestrictionsForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForRepo
  }
)

const reposListInvitationsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListInvitationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListInvitations",
  "/repos/:owner/:repo/invitations",
  paramValidationFactory<any>(reposListInvitationsParamSchema),
  queryValidationFactory<any>(reposListInvitationsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitations
  }
)

const reposDeleteInvitationParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    invitation_id: joi.number().required(),
  })

router.delete(
  "reposDeleteInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<any>(reposDeleteInvitationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteInvitation
  }
)

const reposUpdateInvitationParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    invitation_id: joi.number().required(),
  })

router.patch(
  "reposUpdateInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<any>(reposUpdateInvitationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInvitation
  }
)

const issuesListForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListForRepoQuerySchema = joi
  .object()
  .keys({
    milestone: joi.string(),
    state: joi.string(),
    assignee: joi.string(),
    creator: joi.string(),
    mentioned: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesListForRepo",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<any>(issuesListForRepoParamSchema),
  queryValidationFactory<any>(issuesListForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForRepo
  }
)

const issuesCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "issuesCreate",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<any>(issuesCreateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreate
  }
)

const issuesListCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListCommentsForRepoQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesListCommentsForRepo",
  "/repos/:owner/:repo/issues/comments",
  paramValidationFactory<any>(issuesListCommentsForRepoParamSchema),
  queryValidationFactory<any>(issuesListCommentsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListCommentsForRepo
  }
)

const issuesGetCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.get(
  "issuesGetComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<any>(issuesGetCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetComment
  }
)

const issuesUpdateCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.patch(
  "issuesUpdateComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<any>(issuesUpdateCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateComment
  }
)

const issuesDeleteCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.delete(
  "issuesDeleteComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<any>(issuesDeleteCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteComment
  }
)

const reactionsListForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

const reactionsListForIssueCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<any>(reactionsListForIssueCommentParamSchema),
  queryValidationFactory<any>(reactionsListForIssueCommentQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssueComment
  }
)

const reactionsCreateForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.post(
  "reactionsCreateForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<any>(reactionsCreateForIssueCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssueComment
  }
)

const reactionsDeleteForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteForIssueCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssueComment
  }
)

const issuesListEventsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListEventsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListEventsForRepo",
  "/repos/:owner/:repo/issues/events",
  paramValidationFactory<any>(issuesListEventsForRepoParamSchema),
  queryValidationFactory<any>(issuesListEventsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListEventsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForRepo
  }
)

const issuesGetEventParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    event_id: joi.number().required(),
  })

router.get(
  "issuesGetEvent",
  "/repos/:owner/:repo/issues/events/:eventId",
  paramValidationFactory<any>(issuesGetEventParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesGetEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetEvent
  }
)

const issuesGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.get(
  "issuesGet",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<any>(issuesGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGet
  }
)

const issuesUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.patch(
  "issuesUpdate",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<any>(issuesUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdate
  }
)

const issuesAddAssigneesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.post(
  "issuesAddAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<any>(issuesAddAssigneesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesAddAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddAssignees
  }
)

const issuesRemoveAssigneesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.delete(
  "issuesRemoveAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<any>(issuesRemoveAssigneesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesRemoveAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAssignees
  }
)

const issuesListCommentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

const issuesListCommentsQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListComments",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<any>(issuesListCommentsParamSchema),
  queryValidationFactory<any>(issuesListCommentsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListComments
  }
)

const issuesCreateCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.post(
  "issuesCreateComment",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<any>(issuesCreateCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateComment
  }
)

const issuesListEventsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

const issuesListEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListEvents",
  "/repos/:owner/:repo/issues/:issueNumber/events",
  paramValidationFactory<any>(issuesListEventsParamSchema),
  queryValidationFactory<any>(issuesListEventsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEvents
  }
)

const issuesListLabelsOnIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

const issuesListLabelsOnIssueQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListLabelsOnIssue",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<any>(issuesListLabelsOnIssueParamSchema),
  queryValidationFactory<any>(issuesListLabelsOnIssueQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListLabelsOnIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsOnIssue
  }
)

const issuesAddLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.post(
  "issuesAddLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<any>(issuesAddLabelsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesAddLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddLabels
  }
)

const issuesSetLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.put(
  "issuesSetLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<any>(issuesSetLabelsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesSetLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesSetLabels
  }
)

const issuesRemoveAllLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.delete(
  "issuesRemoveAllLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<any>(issuesRemoveAllLabelsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesRemoveAllLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAllLabels
  }
)

const issuesRemoveLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
    name: joi.string().required(),
  })

router.delete(
  "issuesRemoveLabel",
  "/repos/:owner/:repo/issues/:issueNumber/labels/:name",
  paramValidationFactory<any>(issuesRemoveLabelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesRemoveLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveLabel
  }
)

const issuesLockParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.put(
  "issuesLock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<any>(issuesLockParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesLock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesLock
  }
)

const issuesUnlockParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.delete(
  "issuesUnlock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<any>(issuesUnlockParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesUnlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUnlock
  }
)

const reactionsListForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

const reactionsListForIssueQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<any>(reactionsListForIssueParamSchema),
  queryValidationFactory<any>(reactionsListForIssueQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssue
  }
)

const reactionsCreateForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

router.post(
  "reactionsCreateForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<any>(reactionsCreateForIssueParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssue
  }
)

const reactionsDeleteForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteForIssueParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssue
  }
)

const issuesListEventsForTimelineParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })

const issuesListEventsForTimelineQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListEventsForTimeline",
  "/repos/:owner/:repo/issues/:issueNumber/timeline",
  paramValidationFactory<any>(issuesListEventsForTimelineParamSchema),
  queryValidationFactory<any>(issuesListEventsForTimelineQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListEventsForTimeline

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForTimeline
  }
)

const reposListDeployKeysParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListDeployKeysQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListDeployKeys",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<any>(reposListDeployKeysParamSchema),
  queryValidationFactory<any>(reposListDeployKeysQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListDeployKeys

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployKeys
  }
)

const reposCreateDeployKeyParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateDeployKey",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<any>(reposCreateDeployKeyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployKey
  }
)

const reposGetDeployKeyParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    key_id: joi.number().required(),
  })

router.get(
  "reposGetDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<any>(reposGetDeployKeyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployKey
  }
)

const reposDeleteDeployKeyParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    key_id: joi.number().required(),
  })

router.delete(
  "reposDeleteDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<any>(reposDeleteDeployKeyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployKey
  }
)

const issuesListLabelsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListLabelsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListLabelsForRepo",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<any>(issuesListLabelsForRepoParamSchema),
  queryValidationFactory<any>(issuesListLabelsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListLabelsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForRepo
  }
)

const issuesCreateLabelParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "issuesCreateLabel",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<any>(issuesCreateLabelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesCreateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateLabel
  }
)

const issuesGetLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })

router.get(
  "issuesGetLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<any>(issuesGetLabelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesGetLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetLabel
  }
)

const issuesUpdateLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })

router.patch(
  "issuesUpdateLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<any>(issuesUpdateLabelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesUpdateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateLabel
  }
)

const issuesDeleteLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })

router.delete(
  "issuesDeleteLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<any>(issuesDeleteLabelParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesDeleteLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteLabel
  }
)

const reposListLanguagesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposListLanguages",
  "/repos/:owner/:repo/languages",
  paramValidationFactory<any>(reposListLanguagesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListLanguages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListLanguages
  }
)

const licensesGetForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "licensesGetForRepo",
  "/repos/:owner/:repo/license",
  paramValidationFactory<any>(licensesGetForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-licensesGetForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGetForRepo
  }
)

const reposMergeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposMerge",
  "/repos/:owner/:repo/merges",
  paramValidationFactory<any>(reposMergeParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposMerge
  }
)

const issuesListMilestonesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const issuesListMilestonesQuerySchema = joi
  .object()
  .keys({
    state: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesListMilestones",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<any>(issuesListMilestonesParamSchema),
  queryValidationFactory<any>(issuesListMilestonesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListMilestones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListMilestones
  }
)

const issuesCreateMilestoneParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "issuesCreateMilestone",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<any>(issuesCreateMilestoneParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesCreateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateMilestone
  }
)

const issuesGetMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })

router.get(
  "issuesGetMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<any>(issuesGetMilestoneParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesGetMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetMilestone
  }
)

const issuesUpdateMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })

router.patch(
  "issuesUpdateMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<any>(issuesUpdateMilestoneParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesUpdateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateMilestone
  }
)

const issuesDeleteMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })

router.delete(
  "issuesDeleteMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<any>(issuesDeleteMilestoneParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesDeleteMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteMilestone
  }
)

const issuesListLabelsForMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })

const issuesListLabelsForMilestoneQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "issuesListLabelsForMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber/labels",
  paramValidationFactory<any>(issuesListLabelsForMilestoneParamSchema),
  queryValidationFactory<any>(issuesListLabelsForMilestoneQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListLabelsForMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForMilestone
  }
)

const activityListRepoNotificationsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const activityListRepoNotificationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    all: joi.boolean(),
    participating: joi.boolean(),
    since: joi.string(),
    before: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "activityListRepoNotificationsForAuthenticatedUser",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<any>(
    activityListRepoNotificationsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<any>(
    activityListRepoNotificationsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListRepoNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoNotificationsForAuthenticatedUser
  }
)

const activityMarkRepoNotificationsAsReadParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "activityMarkRepoNotificationsAsRead",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<any>(activityMarkRepoNotificationsAsReadParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityMarkRepoNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkRepoNotificationsAsRead
  }
)

const reposGetPagesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetPages",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<any>(reposGetPagesParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetPages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPages
  }
)

const reposCreatePagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreatePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<any>(reposCreatePagesSiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreatePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreatePagesSite
  }
)

const reposDeletePagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "reposDeletePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<any>(reposDeletePagesSiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeletePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePagesSite
  }
)

const reposUpdateInformationAboutPagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "reposUpdateInformationAboutPagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<any>(reposUpdateInformationAboutPagesSiteParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateInformationAboutPagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInformationAboutPagesSite
  }
)

const reposRequestPagesBuildParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposRequestPagesBuild",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<any>(reposRequestPagesBuildParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposRequestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRequestPagesBuild
  }
)

const reposListPagesBuildsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListPagesBuildsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListPagesBuilds",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<any>(reposListPagesBuildsParamSchema),
  queryValidationFactory<any>(reposListPagesBuildsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListPagesBuilds

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPagesBuilds
  }
)

const reposGetLatestPagesBuildParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetLatestPagesBuild",
  "/repos/:owner/:repo/pages/builds/latest",
  paramValidationFactory<any>(reposGetLatestPagesBuildParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetLatestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestPagesBuild
  }
)

const reposGetPagesBuildParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    build_id: joi.number().required(),
  })

router.get(
  "reposGetPagesBuild",
  "/repos/:owner/:repo/pages/builds/:buildId",
  paramValidationFactory<any>(reposGetPagesBuildParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPagesBuild
  }
)

const projectsListForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const projectsListForRepoQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "projectsListForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<any>(projectsListForRepoParamSchema),
  queryValidationFactory<any>(projectsListForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForRepo
  }
)

const projectsCreateForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "projectsCreateForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<any>(projectsCreateForRepoParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsCreateForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForRepo
  }
)

const pullsListParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const pullsListQuerySchema = joi
  .object()
  .keys({
    state: joi.string(),
    head: joi.string(),
    base: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "pullsList",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<any>(pullsListParamSchema),
  queryValidationFactory<any>(pullsListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsList
  }
)

const pullsCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "pullsCreate",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<any>(pullsCreateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreate
  }
)

const pullsListReviewCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const pullsListReviewCommentsForRepoQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "pullsListReviewCommentsForRepo",
  "/repos/:owner/:repo/pulls/comments",
  paramValidationFactory<any>(pullsListReviewCommentsForRepoParamSchema),
  queryValidationFactory<any>(pullsListReviewCommentsForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListReviewCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewCommentsForRepo
  }
)

const pullsGetReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.get(
  "pullsGetReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<any>(pullsGetReviewCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsGetReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReviewComment
  }
)

const pullsUpdateReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.patch(
  "pullsUpdateReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<any>(pullsUpdateReviewCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsUpdateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReviewComment
  }
)

const pullsDeleteReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.delete(
  "pullsDeleteReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<any>(pullsDeleteReviewCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsDeleteReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeleteReviewComment
  }
)

const reactionsListForPullRequestReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

const reactionsListForPullRequestReviewCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<any>(
    reactionsListForPullRequestReviewCommentParamSchema
  ),
  queryValidationFactory<any>(
    reactionsListForPullRequestReviewCommentQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForPullRequestReviewComment
  }
)

const reactionsCreateForPullRequestReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })

router.post(
  "reactionsCreateForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<any>(
    reactionsCreateForPullRequestReviewCommentParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForPullRequestReviewComment
  }
)

const reactionsDeleteForPullRequestCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })

router.delete(
  "reactionsDeleteForPullRequestComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<any>(reactionsDeleteForPullRequestCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsDeleteForPullRequestComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForPullRequestComment
  }
)

const pullsGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.get(
  "pullsGet",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<any>(pullsGetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGet
  }
)

const pullsUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.patch(
  "pullsUpdate",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<any>(pullsUpdateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdate
  }
)

const pullsListReviewCommentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

const pullsListReviewCommentsQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "pullsListReviewComments",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<any>(pullsListReviewCommentsParamSchema),
  queryValidationFactory<any>(pullsListReviewCommentsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListReviewComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewComments
  }
)

const pullsCreateReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.post(
  "pullsCreateReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<any>(pullsCreateReviewCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsCreateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReviewComment
  }
)

const pullsCreateReplyForReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    comment_id: joi.number().required(),
  })

router.post(
  "pullsCreateReplyForReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies",
  paramValidationFactory<any>(pullsCreateReplyForReviewCommentParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsCreateReplyForReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReplyForReviewComment
  }
)

const pullsListCommitsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

const pullsListCommitsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "pullsListCommits",
  "/repos/:owner/:repo/pulls/:pullNumber/commits",
  paramValidationFactory<any>(pullsListCommitsParamSchema),
  queryValidationFactory<any>(pullsListCommitsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommits
  }
)

const pullsListFilesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

const pullsListFilesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "pullsListFiles",
  "/repos/:owner/:repo/pulls/:pullNumber/files",
  paramValidationFactory<any>(pullsListFilesParamSchema),
  queryValidationFactory<any>(pullsListFilesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListFiles
  }
)

const pullsCheckIfMergedParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.get(
  "pullsCheckIfMerged",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<any>(pullsCheckIfMergedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsCheckIfMerged

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCheckIfMerged
  }
)

const pullsMergeParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.put(
  "pullsMerge",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<any>(pullsMergeParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsMerge
  }
)

const pullsListRequestedReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

const pullsListRequestedReviewersQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "pullsListRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<any>(pullsListRequestedReviewersParamSchema),
  queryValidationFactory<any>(pullsListRequestedReviewersQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListRequestedReviewers
  }
)

const pullsRequestReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.post(
  "pullsRequestReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<any>(pullsRequestReviewersParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsRequestReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRequestReviewers
  }
)

const pullsRemoveRequestedReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.delete(
  "pullsRemoveRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<any>(pullsRemoveRequestedReviewersParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsRemoveRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRemoveRequestedReviewers
  }
)

const pullsListReviewsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

const pullsListReviewsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "pullsListReviews",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<any>(pullsListReviewsParamSchema),
  queryValidationFactory<any>(pullsListReviewsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListReviews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviews
  }
)

const pullsCreateReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.post(
  "pullsCreateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<any>(pullsCreateReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsCreateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReview
  }
)

const pullsGetReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

router.get(
  "pullsGetReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<any>(pullsGetReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsGetReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReview
  }
)

const pullsDeletePendingReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

router.delete(
  "pullsDeletePendingReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<any>(pullsDeletePendingReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsDeletePendingReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeletePendingReview
  }
)

const pullsUpdateReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

router.put(
  "pullsUpdateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<any>(pullsUpdateReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsUpdateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReview
  }
)

const pullsListCommentsForReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

const pullsListCommentsForReviewQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "pullsListCommentsForReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments",
  paramValidationFactory<any>(pullsListCommentsForReviewParamSchema),
  queryValidationFactory<any>(pullsListCommentsForReviewQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsListCommentsForReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommentsForReview
  }
)

const pullsDismissReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

router.put(
  "pullsDismissReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals",
  paramValidationFactory<any>(pullsDismissReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsDismissReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDismissReview
  }
)

const pullsSubmitReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })

router.post(
  "pullsSubmitReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events",
  paramValidationFactory<any>(pullsSubmitReviewParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsSubmitReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsSubmitReview
  }
)

const pullsUpdateBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })

router.put(
  "pullsUpdateBranch",
  "/repos/:owner/:repo/pulls/:pullNumber/update-branch",
  paramValidationFactory<any>(pullsUpdateBranchParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-pullsUpdateBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateBranch
  }
)

const reposGetReadmeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposGetReadmeQuerySchema = joi.object().keys({ ref: joi.string() })

router.get(
  "reposGetReadme",
  "/repos/:owner/:repo/readme",
  paramValidationFactory<any>(reposGetReadmeParamSchema),
  queryValidationFactory<any>(reposGetReadmeQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetReadme

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReadme
  }
)

const reposListReleasesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListReleasesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListReleases",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<any>(reposListReleasesParamSchema),
  queryValidationFactory<any>(reposListReleasesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListReleases

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleases
  }
)

const reposCreateReleaseParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposCreateRelease",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<any>(reposCreateReleaseParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateRelease
  }
)

const reposGetReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })

router.get(
  "reposGetReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<any>(reposGetReleaseAssetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseAsset
  }
)

const reposUpdateReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })

router.patch(
  "reposUpdateReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<any>(reposUpdateReleaseAssetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateReleaseAsset
  }
)

const reposDeleteReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })

router.delete(
  "reposDeleteReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<any>(reposDeleteReleaseAssetParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteReleaseAsset
  }
)

const reposGetLatestReleaseParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetLatestRelease",
  "/repos/:owner/:repo/releases/latest",
  paramValidationFactory<any>(reposGetLatestReleaseParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetLatestRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestRelease
  }
)

const reposGetReleaseByTagParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tag: joi.string().required(),
  })

router.get(
  "reposGetReleaseByTag",
  "/repos/:owner/:repo/releases/tags/:tag",
  paramValidationFactory<any>(reposGetReleaseByTagParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetReleaseByTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseByTag
  }
)

const reposGetReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })

router.get(
  "reposGetRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<any>(reposGetReleaseParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetRelease
  }
)

const reposUpdateReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })

router.patch(
  "reposUpdateRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<any>(reposUpdateReleaseParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUpdateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateRelease
  }
)

const reposDeleteReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })

router.delete(
  "reposDeleteRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<any>(reposDeleteReleaseParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeleteRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteRelease
  }
)

const reposListReleaseAssetsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })

const reposListReleaseAssetsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListReleaseAssets",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<any>(reposListReleaseAssetsParamSchema),
  queryValidationFactory<any>(reposListReleaseAssetsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListReleaseAssets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleaseAssets
  }
)

const reposUploadReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })

const reposUploadReleaseAssetQuerySchema = joi
  .object()
  .keys({ name: joi.string(), label: joi.string() })

router.post(
  "reposUploadReleaseAsset",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<any>(reposUploadReleaseAssetParamSchema),
  queryValidationFactory<any>(reposUploadReleaseAssetQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposUploadReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUploadReleaseAsset
  }
)

const activityListStargazersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const activityListStargazersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListStargazersForRepo",
  "/repos/:owner/:repo/stargazers",
  paramValidationFactory<any>(activityListStargazersForRepoParamSchema),
  queryValidationFactory<any>(activityListStargazersForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListStargazersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListStargazersForRepo
  }
)

const reposGetCodeFrequencyStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetCodeFrequencyStats",
  "/repos/:owner/:repo/stats/code_frequency",
  paramValidationFactory<any>(reposGetCodeFrequencyStatsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCodeFrequencyStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCodeFrequencyStats
  }
)

const reposGetCommitActivityStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetCommitActivityStats",
  "/repos/:owner/:repo/stats/commit_activity",
  paramValidationFactory<any>(reposGetCommitActivityStatsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetCommitActivityStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitActivityStats
  }
)

const reposGetContributorsStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetContributorsStats",
  "/repos/:owner/:repo/stats/contributors",
  paramValidationFactory<any>(reposGetContributorsStatsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetContributorsStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContributorsStats
  }
)

const reposGetParticipationStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetParticipationStats",
  "/repos/:owner/:repo/stats/participation",
  paramValidationFactory<any>(reposGetParticipationStatsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetParticipationStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetParticipationStats
  }
)

const reposGetPunchCardStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetPunchCardStats",
  "/repos/:owner/:repo/stats/punch_card",
  paramValidationFactory<any>(reposGetPunchCardStatsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetPunchCardStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPunchCardStats
  }
)

const reposCreateCommitStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    sha: joi.string().required(),
  })

router.post(
  "reposCreateCommitStatus",
  "/repos/:owner/:repo/statuses/:sha",
  paramValidationFactory<any>(reposCreateCommitStatusParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateCommitStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitStatus
  }
)

const activityListWatchersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const activityListWatchersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListWatchersForRepo",
  "/repos/:owner/:repo/subscribers",
  paramValidationFactory<any>(activityListWatchersForRepoParamSchema),
  queryValidationFactory<any>(activityListWatchersForRepoQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListWatchersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchersForRepo
  }
)

const activityGetRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "activityGetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<any>(activityGetRepoSubscriptionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityGetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetRepoSubscription
  }
)

const activitySetRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "activitySetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<any>(activitySetRepoSubscriptionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activitySetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetRepoSubscription
  }
)

const activityDeleteRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "activityDeleteRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<any>(activityDeleteRepoSubscriptionParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityDeleteRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteRepoSubscription
  }
)

const reposListTagsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListTagsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListTags",
  "/repos/:owner/:repo/tags",
  paramValidationFactory<any>(reposListTagsParamSchema),
  queryValidationFactory<any>(reposListTagsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListTags

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTags
  }
)

const reposListTeamsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposListTeamsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListTeams",
  "/repos/:owner/:repo/teams",
  paramValidationFactory<any>(reposListTeamsParamSchema),
  queryValidationFactory<any>(reposListTeamsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTeams
  }
)

const reposGetAllTopicsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<any>(reposGetAllTopicsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllTopics
  }
)

const reposReplaceAllTopicsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "reposReplaceAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<any>(reposReplaceAllTopicsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposReplaceAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposReplaceAllTopics
  }
)

const reposGetClonesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposGetClonesQuerySchema = joi.object().keys({ per: joi.string() })

router.get(
  "reposGetClones",
  "/repos/:owner/:repo/traffic/clones",
  paramValidationFactory<any>(reposGetClonesParamSchema),
  queryValidationFactory<any>(reposGetClonesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetClones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetClones
  }
)

const reposGetTopPathsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetTopPaths",
  "/repos/:owner/:repo/traffic/popular/paths",
  paramValidationFactory<any>(reposGetTopPathsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetTopPaths

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopPaths
  }
)

const reposGetTopReferrersParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposGetTopReferrers",
  "/repos/:owner/:repo/traffic/popular/referrers",
  paramValidationFactory<any>(reposGetTopReferrersParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetTopReferrers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopReferrers
  }
)

const reposGetViewsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

const reposGetViewsQuerySchema = joi.object().keys({ per: joi.string() })

router.get(
  "reposGetViews",
  "/repos/:owner/:repo/traffic/views",
  paramValidationFactory<any>(reposGetViewsParamSchema),
  queryValidationFactory<any>(reposGetViewsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposGetViews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetViews
  }
)

const reposTransferParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.post(
  "reposTransfer",
  "/repos/:owner/:repo/transfer",
  paramValidationFactory<any>(reposTransferParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposTransfer

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTransfer
  }
)

const reposCheckVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "reposCheckVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<any>(reposCheckVulnerabilityAlertsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCheckVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckVulnerabilityAlerts
  }
)

const reposEnableVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "reposEnableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<any>(reposEnableVulnerabilityAlertsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposEnableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableVulnerabilityAlerts
  }
)

const reposDisableVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "reposDisableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<any>(reposDisableVulnerabilityAlertsParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDisableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableVulnerabilityAlerts
  }
)

const reposDownloadArchiveParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    archive_format: joi.string().required(),
    ref: joi.string().required(),
  })

router.get(
  "reposDownloadArchive",
  "/repos/:owner/:repo/:archiveFormat/:ref",
  paramValidationFactory<any>(reposDownloadArchiveParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDownloadArchive

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDownloadArchive
  }
)

const reposCreateUsingTemplateParamSchema = joi
  .object()
  .keys({
    template_owner: joi.string().required(),
    template_repo: joi.string().required(),
  })

router.post(
  "reposCreateUsingTemplate",
  "/repos/:templateOwner/:templateRepo/generate",
  paramValidationFactory<any>(reposCreateUsingTemplateParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposCreateUsingTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateUsingTemplate
  }
)

const reposListPublicQuerySchema = joi.object().keys({ since: joi.number() })

router.get(
  "reposListPublic",
  "/repositories",
  queryValidationFactory<any>(reposListPublicQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPublic
  }
)

const scimListProvisionedIdentitiesParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

const scimListProvisionedIdentitiesQuerySchema = joi
  .object()
  .keys({ startIndex: joi.number(), count: joi.number(), filter: joi.string() })

router.get(
  "scimListProvisionedIdentities",
  "/scim/v2/organizations/:org/Users",
  paramValidationFactory<any>(scimListProvisionedIdentitiesParamSchema),
  queryValidationFactory<any>(scimListProvisionedIdentitiesQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-scimListProvisionedIdentities

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimListProvisionedIdentities
  }
)

const scimProvisionAndInviteUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.post(
  "scimProvisionAndInviteUser",
  "/scim/v2/organizations/:org/Users",
  paramValidationFactory<any>(scimProvisionAndInviteUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-scimProvisionAndInviteUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimProvisionAndInviteUser
  }
)

const scimGetProvisioningInformationForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })

router.get(
  "scimGetProvisioningInformationForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<any>(scimGetProvisioningInformationForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-scimGetProvisioningInformationForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimGetProvisioningInformationForUser
  }
)

const scimSetInformationForProvisionedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })

router.put(
  "scimSetInformationForProvisionedUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<any>(scimSetInformationForProvisionedUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-scimSetInformationForProvisionedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimSetInformationForProvisionedUser
  }
)

const scimUpdateAttributeForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })

router.patch(
  "scimUpdateAttributeForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<any>(scimUpdateAttributeForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-scimUpdateAttributeForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimUpdateAttributeForUser
  }
)

const scimDeleteUserFromOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })

router.delete(
  "scimDeleteUserFromOrg",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<any>(scimDeleteUserFromOrgParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-scimDeleteUserFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimDeleteUserFromOrg
  }
)

const searchCodeQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "searchCode",
  "/search/code",
  queryValidationFactory<any>(searchCodeQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCode
  }
)

const searchCommitsQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "searchCommits",
  "/search/commits",
  queryValidationFactory<any>(searchCommitsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCommits
  }
)

const searchIssuesAndPullRequestsQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "searchIssuesAndPullRequests",
  "/search/issues",
  queryValidationFactory<any>(searchIssuesAndPullRequestsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchIssuesAndPullRequests

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchIssuesAndPullRequests
  }
)

const searchLabelsQuerySchema = joi
  .object()
  .keys({
    repository_id: joi.number().required(),
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
  })

router.get(
  "searchLabels",
  "/search/labels",
  queryValidationFactory<any>(searchLabelsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchLabels
  }
)

const searchReposQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "searchRepos",
  "/search/repositories",
  queryValidationFactory<any>(searchReposQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchRepos

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchRepos
  }
)

const searchTopicsQuerySchema = joi
  .object()
  .keys({ q: joi.string().required() })

router.get(
  "searchTopics",
  "/search/topics",
  queryValidationFactory<any>(searchTopicsQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchTopics
  }
)

const searchUsersQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "searchUsers",
  "/search/users",
  queryValidationFactory<any>(searchUsersQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-searchUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchUsers
  }
)

const teamsGetLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.get(
  "teamsGetLegacy",
  "/teams/:teamId",
  paramValidationFactory<any>(teamsGetLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetLegacy
  }
)

const teamsUpdateLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.patch(
  "teamsUpdateLegacy",
  "/teams/:teamId",
  paramValidationFactory<any>(teamsUpdateLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateLegacy
  }
)

const teamsDeleteLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.delete(
  "teamsDeleteLegacy",
  "/teams/:teamId",
  paramValidationFactory<any>(teamsDeleteLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteLegacy
  }
)

const teamsListDiscussionsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListDiscussionsLegacyQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListDiscussionsLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<any>(teamsListDiscussionsLegacyParamSchema),
  queryValidationFactory<any>(teamsListDiscussionsLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListDiscussionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsLegacy
  }
)

const teamsCreateDiscussionLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.post(
  "teamsCreateDiscussionLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<any>(teamsCreateDiscussionLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionLegacy
  }
)

const teamsGetDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

router.get(
  "teamsGetDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsGetDiscussionLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionLegacy
  }
)

const teamsUpdateDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

router.patch(
  "teamsUpdateDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsUpdateDiscussionLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionLegacy
  }
)

const teamsDeleteDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

router.delete(
  "teamsDeleteDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<any>(teamsDeleteDiscussionLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionLegacy
  }
)

const teamsListDiscussionCommentsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

const teamsListDiscussionCommentsLegacyQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListDiscussionCommentsLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<any>(teamsListDiscussionCommentsLegacyParamSchema),
  queryValidationFactory<any>(teamsListDiscussionCommentsLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListDiscussionCommentsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsLegacy
  }
)

const teamsCreateDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

router.post(
  "teamsCreateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<any>(teamsCreateDiscussionCommentLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentLegacy
  }
)

const teamsGetDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.get(
  "teamsGetDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsGetDiscussionCommentLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentLegacy
  }
)

const teamsUpdateDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.patch(
  "teamsUpdateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsUpdateDiscussionCommentLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentLegacy
  }
)

const teamsDeleteDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.delete(
  "teamsDeleteDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<any>(teamsDeleteDiscussionCommentLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

const reactionsListForTeamDiscussionCommentLegacyQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<any>(
    reactionsListForTeamDiscussionCommentLegacyParamSchema
  ),
  queryValidationFactory<any>(
    reactionsListForTeamDiscussionCommentLegacyQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentLegacy
  }
)

const reactionsCreateForTeamDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })

router.post(
  "reactionsCreateForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<any>(
    reactionsCreateForTeamDiscussionCommentLegacyParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

const reactionsListForTeamDiscussionLegacyQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "reactionsListForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<any>(reactionsListForTeamDiscussionLegacyParamSchema),
  queryValidationFactory<any>(reactionsListForTeamDiscussionLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reactionsListForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionLegacy
  }
)

const reactionsCreateForTeamDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })

router.post(
  "reactionsCreateForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<any>(
    reactionsCreateForTeamDiscussionLegacyParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionLegacy
  }
)

const teamsListPendingInvitationsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListPendingInvitationsLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListPendingInvitationsLegacy",
  "/teams/:teamId/invitations",
  paramValidationFactory<any>(teamsListPendingInvitationsLegacyParamSchema),
  queryValidationFactory<any>(teamsListPendingInvitationsLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListPendingInvitationsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsLegacy
  }
)

const teamsListMembersLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListMembersLegacyQuerySchema = joi
  .object()
  .keys({ role: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListMembersLegacy",
  "/teams/:teamId/members",
  paramValidationFactory<any>(teamsListMembersLegacyParamSchema),
  queryValidationFactory<any>(teamsListMembersLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListMembersLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersLegacy
  }
)

const teamsGetMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.get(
  "teamsGetMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<any>(teamsGetMemberLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMemberLegacy
  }
)

const teamsAddMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.put(
  "teamsAddMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<any>(teamsAddMemberLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddMemberLegacy
  }
)

const teamsRemoveMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.delete(
  "teamsRemoveMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<any>(teamsRemoveMemberLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMemberLegacy
  }
)

const teamsGetMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.get(
  "teamsGetMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<any>(teamsGetMembershipForUserLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsGetMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserLegacy
  }
)

const teamsAddOrUpdateMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.put(
  "teamsAddOrUpdateMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<any>(
    teamsAddOrUpdateMembershipForUserLegacyParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy
  }
)

const teamsRemoveMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })

router.delete(
  "teamsRemoveMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<any>(teamsRemoveMembershipForUserLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserLegacy
  }
)

const teamsListProjectsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListProjectsLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListProjectsLegacy",
  "/teams/:teamId/projects",
  paramValidationFactory<any>(teamsListProjectsLegacyParamSchema),
  queryValidationFactory<any>(teamsListProjectsLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListProjectsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsLegacy
  }
)

const teamsCheckPermissionsForProjectLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })

router.get(
  "teamsCheckPermissionsForProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<any>(teamsCheckPermissionsForProjectLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectLegacy
  }
)

const teamsAddOrUpdateProjectPermissionsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })

router.put(
  "teamsAddOrUpdateProjectPermissionsLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<any>(
    teamsAddOrUpdateProjectPermissionsLegacyParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy
  }
)

const teamsRemoveProjectLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })

router.delete(
  "teamsRemoveProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<any>(teamsRemoveProjectLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectLegacy
  }
)

const teamsListReposLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListReposLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListReposLegacy",
  "/teams/:teamId/repos",
  paramValidationFactory<any>(teamsListReposLegacyParamSchema),
  queryValidationFactory<any>(teamsListReposLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListReposLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposLegacy
  }
)

const teamsCheckPermissionsForRepoLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.get(
  "teamsCheckPermissionsForRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<any>(teamsCheckPermissionsForRepoLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoLegacy
  }
)

const teamsAddOrUpdateRepoPermissionsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.put(
  "teamsAddOrUpdateRepoPermissionsLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<any>(teamsAddOrUpdateRepoPermissionsLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy
  }
)

const teamsRemoveRepoLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })

router.delete(
  "teamsRemoveRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<any>(teamsRemoveRepoLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsRemoveRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoLegacy
  }
)

const teamsListIdPGroupsForLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.get(
  "teamsListIdPGroupsForLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  paramValidationFactory<any>(teamsListIdPGroupsForLegacyParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListIdPGroupsForLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsForLegacy
  }
)

const teamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  paramValidationFactory<any>(
    teamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsLegacy
  }
)

const teamsListChildLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })

const teamsListChildLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListChildLegacy",
  "/teams/:teamId/teams",
  paramValidationFactory<any>(teamsListChildLegacyParamSchema),
  queryValidationFactory<any>(teamsListChildLegacyQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListChildLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildLegacy
  }
)

router.get("usersGetAuthenticated", "/user", async (ctx, next) => {
  //region safe-edit-region-usersGetAuthenticated

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-usersGetAuthenticated
})

router.patch("usersUpdateAuthenticated", "/user", async (ctx, next) => {
  //region safe-edit-region-usersUpdateAuthenticated

  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()

  //endregion safe-edit-region-usersUpdateAuthenticated
})

router.get(
  "usersListBlockedByAuthenticated",
  "/user/blocks",
  async (ctx, next) => {
    //region safe-edit-region-usersListBlockedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListBlockedByAuthenticated
  }
)

const usersCheckBlockedParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.get(
  "usersCheckBlocked",
  "/user/blocks/:username",
  paramValidationFactory<any>(usersCheckBlockedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersCheckBlocked

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckBlocked
  }
)

const usersBlockParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.put(
  "usersBlock",
  "/user/blocks/:username",
  paramValidationFactory<any>(usersBlockParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersBlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersBlock
  }
)

const usersUnblockParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.delete(
  "usersUnblock",
  "/user/blocks/:username",
  paramValidationFactory<any>(usersUnblockParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersUnblock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnblock
  }
)

router.patch(
  "usersSetPrimaryEmailVisibilityForAuthenticated",
  "/user/email/visibility",
  async (ctx, next) => {
    //region safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticated
  }
)

const usersListEmailsForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListEmailsForAuthenticated",
  "/user/emails",
  queryValidationFactory<any>(usersListEmailsForAuthenticatedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListEmailsForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListEmailsForAuthenticated
  }
)

router.post(
  "usersAddEmailForAuthenticated",
  "/user/emails",
  async (ctx, next) => {
    //region safe-edit-region-usersAddEmailForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersAddEmailForAuthenticated
  }
)

router.delete(
  "usersDeleteEmailForAuthenticated",
  "/user/emails",
  async (ctx, next) => {
    //region safe-edit-region-usersDeleteEmailForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteEmailForAuthenticated
  }
)

const usersListFollowersForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListFollowersForAuthenticatedUser",
  "/user/followers",
  queryValidationFactory<any>(
    usersListFollowersForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-usersListFollowersForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForAuthenticatedUser
  }
)

const usersListFollowedByAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListFollowedByAuthenticated",
  "/user/following",
  queryValidationFactory<any>(usersListFollowedByAuthenticatedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListFollowedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowedByAuthenticated
  }
)

const usersCheckPersonIsFollowedByAuthenticatedParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.get(
  "usersCheckPersonIsFollowedByAuthenticated",
  "/user/following/:username",
  paramValidationFactory<any>(
    usersCheckPersonIsFollowedByAuthenticatedParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-usersCheckPersonIsFollowedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckPersonIsFollowedByAuthenticated
  }
)

const usersFollowParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.put(
  "usersFollow",
  "/user/following/:username",
  paramValidationFactory<any>(usersFollowParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersFollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersFollow
  }
)

const usersUnfollowParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.delete(
  "usersUnfollow",
  "/user/following/:username",
  paramValidationFactory<any>(usersUnfollowParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersUnfollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnfollow
  }
)

const usersListGpgKeysForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListGpgKeysForAuthenticated",
  "/user/gpg_keys",
  queryValidationFactory<any>(usersListGpgKeysForAuthenticatedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListGpgKeysForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForAuthenticated
  }
)

router.post(
  "usersCreateGpgKeyForAuthenticated",
  "/user/gpg_keys",
  async (ctx, next) => {
    //region safe-edit-region-usersCreateGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreateGpgKeyForAuthenticated
  }
)

const usersGetGpgKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ gpg_key_id: joi.number().required() })

router.get(
  "usersGetGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<any>(usersGetGpgKeyForAuthenticatedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersGetGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetGpgKeyForAuthenticated
  }
)

const usersDeleteGpgKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ gpg_key_id: joi.number().required() })

router.delete(
  "usersDeleteGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<any>(usersDeleteGpgKeyForAuthenticatedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersDeleteGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteGpgKeyForAuthenticated
  }
)

const appsListInstallationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListInstallationsForAuthenticatedUser",
  "/user/installations",
  queryValidationFactory<any>(
    appsListInstallationsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-appsListInstallationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationsForAuthenticatedUser
  }
)

const appsListInstallationReposForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })

const appsListInstallationReposForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListInstallationReposForAuthenticatedUser",
  "/user/installations/:installationId/repositories",
  paramValidationFactory<any>(
    appsListInstallationReposForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<any>(
    appsListInstallationReposForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-appsListInstallationReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationReposForAuthenticatedUser
  }
)

const appsAddRepoToInstallationParamSchema = joi
  .object()
  .keys({
    installation_id: joi.number().required(),
    repository_id: joi.number().required(),
  })

router.put(
  "appsAddRepoToInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<any>(appsAddRepoToInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsAddRepoToInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsAddRepoToInstallation
  }
)

const appsRemoveRepoFromInstallationParamSchema = joi
  .object()
  .keys({
    installation_id: joi.number().required(),
    repository_id: joi.number().required(),
  })

router.delete(
  "appsRemoveRepoFromInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<any>(appsRemoveRepoFromInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsRemoveRepoFromInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRemoveRepoFromInstallation
  }
)

const issuesListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "issuesListForAuthenticatedUser",
  "/user/issues",
  queryValidationFactory<any>(issuesListForAuthenticatedUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-issuesListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForAuthenticatedUser
  }
)

const usersListPublicSshKeysForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListPublicSshKeysForAuthenticated",
  "/user/keys",
  queryValidationFactory<any>(
    usersListPublicSshKeysForAuthenticatedQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-usersListPublicSshKeysForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicSshKeysForAuthenticated
  }
)

router.post(
  "usersCreatePublicSshKeyForAuthenticated",
  "/user/keys",
  async (ctx, next) => {
    //region safe-edit-region-usersCreatePublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreatePublicSshKeyForAuthenticated
  }
)

const usersGetPublicSshKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ key_id: joi.number().required() })

router.get(
  "usersGetPublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  paramValidationFactory<any>(usersGetPublicSshKeyForAuthenticatedParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersGetPublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetPublicSshKeyForAuthenticated
  }
)

const usersDeletePublicSshKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ key_id: joi.number().required() })

router.delete(
  "usersDeletePublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  paramValidationFactory<any>(
    usersDeletePublicSshKeyForAuthenticatedParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-usersDeletePublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeletePublicSshKeyForAuthenticated
  }
)

const appsListSubscriptionsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListSubscriptionsForAuthenticatedUser",
  "/user/marketplace_purchases",
  queryValidationFactory<any>(
    appsListSubscriptionsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUser
  }
)

const appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "appsListSubscriptionsForAuthenticatedUserStubbed",
  "/user/marketplace_purchases/stubbed",
  queryValidationFactory<any>(
    appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed
  }
)

const orgsListMembershipsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListMembershipsForAuthenticatedUser",
  "/user/memberships/orgs",
  queryValidationFactory<any>(
    orgsListMembershipsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-orgsListMembershipsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembershipsForAuthenticatedUser
  }
)

const orgsGetMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.get(
  "orgsGetMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<any>(orgsGetMembershipForAuthenticatedUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsGetMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForAuthenticatedUser
  }
)

const orgsUpdateMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })

router.patch(
  "orgsUpdateMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<any>(
    orgsUpdateMembershipForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-orgsUpdateMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateMembershipForAuthenticatedUser
  }
)

router.post(
  "migrationsStartForAuthenticatedUser",
  "/user/migrations",
  async (ctx, next) => {
    //region safe-edit-region-migrationsStartForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForAuthenticatedUser
  }
)

const migrationsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "migrationsListForAuthenticatedUser",
  "/user/migrations",
  queryValidationFactory<any>(migrationsListForAuthenticatedUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForAuthenticatedUser
  }
)

const migrationsGetStatusForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })

router.get(
  "migrationsGetStatusForAuthenticatedUser",
  "/user/migrations/:migrationId",
  paramValidationFactory<any>(
    migrationsGetStatusForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetStatusForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForAuthenticatedUser
  }
)

const migrationsGetArchiveForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })

router.get(
  "migrationsGetArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<any>(
    migrationsGetArchiveForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-migrationsGetArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetArchiveForAuthenticatedUser
  }
)

const migrationsDeleteArchiveForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })

router.delete(
  "migrationsDeleteArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<any>(
    migrationsDeleteArchiveForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser
  }
)

const migrationsUnlockRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({
    migration_id: joi.number().required(),
    repo_name: joi.string().required(),
  })

router.delete(
  "migrationsUnlockRepoForAuthenticatedUser",
  "/user/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<any>(
    migrationsUnlockRepoForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-migrationsUnlockRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForAuthenticatedUser
  }
)

const orgsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListForAuthenticatedUser",
  "/user/orgs",
  queryValidationFactory<any>(orgsListForAuthenticatedUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForAuthenticatedUser
  }
)

router.post(
  "projectsCreateForAuthenticatedUser",
  "/user/projects",
  async (ctx, next) => {
    //region safe-edit-region-projectsCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForAuthenticatedUser
  }
)

const usersListPublicEmailsForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListPublicEmailsForAuthenticated",
  "/user/public_emails",
  queryValidationFactory<any>(usersListPublicEmailsForAuthenticatedQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListPublicEmailsForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicEmailsForAuthenticated
  }
)

const reposListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    visibility: joi.string(),
    affiliation: joi.string(),
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListForAuthenticatedUser",
  "/user/repos",
  queryValidationFactory<any>(reposListForAuthenticatedUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForAuthenticatedUser
  }
)

router.post(
  "reposCreateForAuthenticatedUser",
  "/user/repos",
  async (ctx, next) => {
    //region safe-edit-region-reposCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateForAuthenticatedUser
  }
)

const reposListInvitationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "reposListInvitationsForAuthenticatedUser",
  "/user/repository_invitations",
  queryValidationFactory<any>(
    reposListInvitationsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-reposListInvitationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitationsForAuthenticatedUser
  }
)

const reposAcceptInvitationParamSchema = joi
  .object()
  .keys({ invitation_id: joi.number().required() })

router.patch(
  "reposAcceptInvitation",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<any>(reposAcceptInvitationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposAcceptInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAcceptInvitation
  }
)

const reposDeclineInvitationParamSchema = joi
  .object()
  .keys({ invitation_id: joi.number().required() })

router.delete(
  "reposDeclineInvitation",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<any>(reposDeclineInvitationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-reposDeclineInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeclineInvitation
  }
)

const activityListReposStarredByAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "activityListReposStarredByAuthenticatedUser",
  "/user/starred",
  queryValidationFactory<any>(
    activityListReposStarredByAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListReposStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByAuthenticatedUser
  }
)

const activityCheckRepoIsStarredByAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.get(
  "activityCheckRepoIsStarredByAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<any>(
    activityCheckRepoIsStarredByAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser
  }
)

const activityStarRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.put(
  "activityStarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<any>(activityStarRepoForAuthenticatedUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-activityStarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityStarRepoForAuthenticatedUser
  }
)

const activityUnstarRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })

router.delete(
  "activityUnstarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<any>(
    activityUnstarRepoForAuthenticatedUserParamSchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityUnstarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityUnstarRepoForAuthenticatedUser
  }
)

const activityListWatchedReposForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListWatchedReposForAuthenticatedUser",
  "/user/subscriptions",
  queryValidationFactory<any>(
    activityListWatchedReposForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListWatchedReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchedReposForAuthenticatedUser
  }
)

const teamsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "teamsListForAuthenticatedUser",
  "/user/teams",
  queryValidationFactory<any>(teamsListForAuthenticatedUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-teamsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListForAuthenticatedUser
  }
)

const migrationsListReposForUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })

const migrationsListReposForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "migrationsListReposForUser",
  "/user/:migrationId/repositories",
  paramValidationFactory<any>(migrationsListReposForUserParamSchema),
  queryValidationFactory<any>(migrationsListReposForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-migrationsListReposForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForUser
  }
)

const usersListQuerySchema = joi.object().keys({ since: joi.string() })

router.get(
  "usersList",
  "/users",
  queryValidationFactory<any>(usersListQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersList
  }
)

const usersGetByUsernameParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.get(
  "usersGetByUsername",
  "/users/:username",
  paramValidationFactory<any>(usersGetByUsernameParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersGetByUsername

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetByUsername
  }
)

const activityListEventsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListEventsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListEventsForAuthenticatedUser",
  "/users/:username/events",
  paramValidationFactory<any>(
    activityListEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<any>(
    activityListEventsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListEventsForAuthenticatedUser
  }
)

const activityListOrgEventsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required(), org: joi.string().required() })

const activityListOrgEventsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListOrgEventsForAuthenticatedUser",
  "/users/:username/events/orgs/:org",
  paramValidationFactory<any>(
    activityListOrgEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<any>(
    activityListOrgEventsForAuthenticatedUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListOrgEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListOrgEventsForAuthenticatedUser
  }
)

const activityListPublicEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListPublicEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListPublicEventsForUser",
  "/users/:username/events/public",
  paramValidationFactory<any>(activityListPublicEventsForUserParamSchema),
  queryValidationFactory<any>(activityListPublicEventsForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForUser
  }
)

const usersListFollowersForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const usersListFollowersForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListFollowersForUser",
  "/users/:username/followers",
  paramValidationFactory<any>(usersListFollowersForUserParamSchema),
  queryValidationFactory<any>(usersListFollowersForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListFollowersForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForUser
  }
)

const usersListFollowingForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const usersListFollowingForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListFollowingForUser",
  "/users/:username/following",
  paramValidationFactory<any>(usersListFollowingForUserParamSchema),
  queryValidationFactory<any>(usersListFollowingForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowingForUser
  }
)

const usersCheckFollowingForUserParamSchema = joi
  .object()
  .keys({
    username: joi.string().required(),
    target_user: joi.string().required(),
  })

router.get(
  "usersCheckFollowingForUser",
  "/users/:username/following/:targetUser",
  paramValidationFactory<any>(usersCheckFollowingForUserParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-usersCheckFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckFollowingForUser
  }
)

const gistsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const gistsListForUserQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "gistsListForUser",
  "/users/:username/gists",
  paramValidationFactory<any>(gistsListForUserParamSchema),
  queryValidationFactory<any>(gistsListForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-gistsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForUser
  }
)

const usersListGpgKeysForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const usersListGpgKeysForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListGpgKeysForUser",
  "/users/:username/gpg_keys",
  paramValidationFactory<any>(usersListGpgKeysForUserParamSchema),
  queryValidationFactory<any>(usersListGpgKeysForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListGpgKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForUser
  }
)

const usersGetContextForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const usersGetContextForUserQuerySchema = joi
  .object()
  .keys({ subject_type: joi.string(), subject_id: joi.string() })

router.get(
  "usersGetContextForUser",
  "/users/:username/hovercard",
  paramValidationFactory<any>(usersGetContextForUserParamSchema),
  queryValidationFactory<any>(usersGetContextForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersGetContextForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetContextForUser
  }
)

const appsGetUserInstallationParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

router.get(
  "appsGetUserInstallation",
  "/users/:username/installation",
  paramValidationFactory<any>(appsGetUserInstallationParamSchema),
  async (ctx, next) => {
    //region safe-edit-region-appsGetUserInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetUserInstallation
  }
)

const usersListPublicKeysForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const usersListPublicKeysForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "usersListPublicKeysForUser",
  "/users/:username/keys",
  paramValidationFactory<any>(usersListPublicKeysForUserParamSchema),
  queryValidationFactory<any>(usersListPublicKeysForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-usersListPublicKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicKeysForUser
  }
)

const orgsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const orgsListForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "orgsListForUser",
  "/users/:username/orgs",
  paramValidationFactory<any>(orgsListForUserParamSchema),
  queryValidationFactory<any>(orgsListForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-orgsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForUser
  }
)

const projectsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const projectsListForUserQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })

router.get(
  "projectsListForUser",
  "/users/:username/projects",
  paramValidationFactory<any>(projectsListForUserParamSchema),
  queryValidationFactory<any>(projectsListForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-projectsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForUser
  }
)

const activityListReceivedEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListReceivedEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListReceivedEventsForUser",
  "/users/:username/received_events",
  paramValidationFactory<any>(activityListReceivedEventsForUserParamSchema),
  queryValidationFactory<any>(activityListReceivedEventsForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListReceivedEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedEventsForUser
  }
)

const activityListReceivedPublicEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListReceivedPublicEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListReceivedPublicEventsForUser",
  "/users/:username/received_events/public",
  paramValidationFactory<any>(
    activityListReceivedPublicEventsForUserParamSchema
  ),
  queryValidationFactory<any>(
    activityListReceivedPublicEventsForUserQuerySchema
  ),
  async (ctx, next) => {
    //region safe-edit-region-activityListReceivedPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedPublicEventsForUser
  }
)

const reposListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const reposListForUserQuerySchema = joi
  .object()
  .keys({
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "reposListForUser",
  "/users/:username/repos",
  paramValidationFactory<any>(reposListForUserParamSchema),
  queryValidationFactory<any>(reposListForUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-reposListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForUser
  }
)

const activityListReposStarredByUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListReposStarredByUserQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })

router.get(
  "activityListReposStarredByUser",
  "/users/:username/starred",
  paramValidationFactory<any>(activityListReposStarredByUserParamSchema),
  queryValidationFactory<any>(activityListReposStarredByUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListReposStarredByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByUser
  }
)

const activityListReposWatchedByUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })

const activityListReposWatchedByUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })

router.get(
  "activityListReposWatchedByUser",
  "/users/:username/subscriptions",
  paramValidationFactory<any>(activityListReposWatchedByUserParamSchema),
  queryValidationFactory<any>(activityListReposWatchedByUserQuerySchema),
  async (ctx, next) => {
    //region safe-edit-region-activityListReposWatchedByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposWatchedByUser
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
