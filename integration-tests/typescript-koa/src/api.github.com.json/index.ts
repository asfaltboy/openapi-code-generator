/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa from "koa"
import koaBody from "koa-body"

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

router.get("appsGetAuthenticated", "/app", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post(
  "appsCreateFromManifest",
  "/app-manifests/:code/conversions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("appsListInstallations", "/app/installations", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "appsGetInstallation",
  "/app/installations/:installationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsDeleteInstallation",
  "/app/installations/:installationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "appsCreateInstallationAccessToken",
  "/app/installations/:installationId/access_tokens",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "appsSuspendInstallation",
  "/app/installations/:installationId/suspended",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsUnsuspendInstallation",
  "/app/installations/:installationId/suspended",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "oauthAuthorizationsListGrants",
  "/applications/grants",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "oauthAuthorizationsGetGrant",
  "/applications/grants/:grantId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "oauthAuthorizationsDeleteGrant",
  "/applications/grants/:grantId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsDeleteAuthorization",
  "/applications/:clientId/grant",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsRevokeGrantForApplication",
  "/applications/:clientId/grants/:accessToken",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "appsCheckToken",
  "/applications/:clientId/token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "appsResetToken",
  "/applications/:clientId/token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsDeleteToken",
  "/applications/:clientId/token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsCheckAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "appsResetAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsRevokeAuthorizationForApplication",
  "/applications/:clientId/tokens/:accessToken",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("appsGetBySlug", "/apps/:appSlug", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "oauthAuthorizationsListAuthorizations",
  "/authorizations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "oauthAuthorizationsCreateAuthorization",
  "/authorizations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForApp",
  "/authorizations/clients/:clientId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint",
  "/authorizations/clients/:clientId/:fingerprint",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "oauthAuthorizationsGetAuthorization",
  "/authorizations/:authorizationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "oauthAuthorizationsUpdateAuthorization",
  "/authorizations/:authorizationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "oauthAuthorizationsDeleteAuthorization",
  "/authorizations/:authorizationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "codesOfConductGetAllCodesOfConduct",
  "/codes_of_conduct",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "codesOfConductGetConductCode",
  "/codes_of_conduct/:key",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "appsCreateContentAttachment",
  "/content_references/:contentReferenceId/attachments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("emojisGet", "/emojis", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("activityListPublicEvents", "/events", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("activityGetFeeds", "/feeds", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsList", "/gists", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("gistsCreate", "/gists", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsListPublic", "/gists/public", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsListStarred", "/gists/starred", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsGet", "/gists/:gistId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("gistsUpdate", "/gists/:gistId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("gistsDelete", "/gists/:gistId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "gistsListComments",
  "/gists/:gistId/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gistsCreateComment",
  "/gists/:gistId/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gistsGetComment",
  "/gists/:gistId/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "gistsUpdateComment",
  "/gists/:gistId/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "gistsDeleteComment",
  "/gists/:gistId/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("gistsListCommits", "/gists/:gistId/commits", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("gistsFork", "/gists/:gistId/forks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsListForks", "/gists/:gistId/forks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.put("gistsStar", "/gists/:gistId/star", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("gistsUnstar", "/gists/:gistId/star", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsCheckIsStarred", "/gists/:gistId/star", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("gistsGetRevision", "/gists/:gistId/:sha", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "gitignoreGetAllTemplates",
  "/gitignore/templates",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitignoreGetTemplate",
  "/gitignore/templates/:name",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListReposAccessibleToInstallation",
  "/installation/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsRevokeInstallationAccessToken",
  "/installation/token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("issuesList", "/issues", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("licensesGetAllCommonlyUsed", "/licenses", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("licensesGet", "/licenses/:license", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("markdownRender", "/markdown", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("markdownRenderRaw", "/markdown/raw", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "appsGetSubscriptionPlanForAccount",
  "/marketplace_listing/accounts/:accountId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("appsListPlans", "/marketplace_listing/plans", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "appsListAccountsForPlan",
  "/marketplace_listing/plans/:planId/accounts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsGetSubscriptionPlanForAccountStubbed",
  "/marketplace_listing/stubbed/accounts/:accountId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListPlansStubbed",
  "/marketplace_listing/stubbed/plans",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListAccountsForPlanStubbed",
  "/marketplace_listing/stubbed/plans/:planId/accounts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("metaGet", "/meta", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "activityListPublicEventsForRepoNetwork",
  "/networks/:owner/:repo/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListNotificationsForAuthenticatedUser",
  "/notifications",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "activityMarkNotificationsAsRead",
  "/notifications",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityGetThread",
  "/notifications/threads/:threadId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "activityMarkThreadAsRead",
  "/notifications/threads/:threadId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityGetThreadSubscriptionForAuthenticatedUser",
  "/notifications/threads/:threadId/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "activitySetThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "activityDeleteThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("orgsList", "/organizations", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("orgsGet", "/orgs/:org", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("orgsUpdate", "/orgs/:org", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "actionsListSelfHostedRunnersForOrg",
  "/orgs/:org/actions/runners",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListRunnerApplicationsForOrg",
  "/orgs/:org/actions/runners/downloads",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsCreateRegistrationTokenForOrg",
  "/orgs/:org/actions/runners/registration-token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsCreateRemoveTokenForOrg",
  "/orgs/:org/actions/runners/remove-token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteSelfHostedRunnerFromOrg",
  "/orgs/:org/actions/runners/:runnerId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListOrgSecrets",
  "/orgs/:org/actions/secrets",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetOrgPublicKey",
  "/orgs/:org/actions/secrets/public-key",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "actionsCreateOrUpdateOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "actionsSetSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "actionsAddSelectedRepoToOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("orgsListBlockedUsers", "/orgs/:org/blocks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "orgsCheckBlockedUser",
  "/orgs/:org/blocks/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "orgsBlockUser",
  "/orgs/:org/blocks/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsUnblockUser",
  "/orgs/:org/blocks/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListSamlSsoAuthorizations",
  "/orgs/:org/credential-authorizations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsRemoveSamlSsoAuthorization",
  "/orgs/:org/credential-authorizations/:credentialId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListPublicOrgEvents",
  "/orgs/:org/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("orgsListWebhooks", "/orgs/:org/hooks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("orgsCreateWebhook", "/orgs/:org/hooks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("orgsGetWebhook", "/orgs/:org/hooks/:hookId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch(
  "orgsUpdateWebhook",
  "/orgs/:org/hooks/:hookId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsDeleteWebhook",
  "/orgs/:org/hooks/:hookId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "orgsPingWebhook",
  "/orgs/:org/hooks/:hookId/pings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsGetOrgInstallation",
  "/orgs/:org/installation",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListAppInstallations",
  "/orgs/:org/installations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "interactionsGetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "interactionsSetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "interactionsRemoveRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListPendingInvitations",
  "/orgs/:org/invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "orgsCreateInvitation",
  "/orgs/:org/invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListInvitationTeams",
  "/orgs/:org/invitations/:invitationId/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("issuesListForOrg", "/orgs/:org/issues", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("orgsListMembers", "/orgs/:org/members", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "orgsCheckMembershipForUser",
  "/orgs/:org/members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsRemoveMember",
  "/orgs/:org/members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsGetMembershipForUser",
  "/orgs/:org/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "orgsSetMembershipForUser",
  "/orgs/:org/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsRemoveMembershipForUser",
  "/orgs/:org/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "migrationsStartForOrg",
  "/orgs/:org/migrations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsListForOrg",
  "/orgs/:org/migrations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetStatusForOrg",
  "/orgs/:org/migrations/:migrationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsDownloadArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "migrationsDeleteArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "migrationsUnlockRepoForOrg",
  "/orgs/:org/migrations/:migrationId/repos/:repoName/lock",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsListReposForOrg",
  "/orgs/:org/migrations/:migrationId/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListOutsideCollaborators",
  "/orgs/:org/outside_collaborators",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsRemoveOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "orgsConvertMemberToOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("projectsListForOrg", "/orgs/:org/projects", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post(
  "projectsCreateForOrg",
  "/orgs/:org/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListPublicMembers",
  "/orgs/:org/public_members",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsCheckPublicMembershipForUser",
  "/orgs/:org/public_members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "orgsSetPublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "orgsRemovePublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposListForOrg", "/orgs/:org/repos", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("reposCreateInOrg", "/orgs/:org/repos", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "teamsListIdPGroupsForOrg",
  "/orgs/:org/team-sync/groups",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("teamsList", "/orgs/:org/teams", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("teamsCreate", "/orgs/:org/teams", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "teamsGetByName",
  "/orgs/:org/teams/:teamSlug",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsUpdateInOrg",
  "/orgs/:org/teams/:teamSlug",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsDeleteInOrg",
  "/orgs/:org/teams/:teamSlug",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListDiscussionsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "teamsCreateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsUpdateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsDeleteDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListDiscussionCommentsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "teamsCreateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsUpdateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsDeleteDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForTeamDiscussionComment",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForTeamDiscussion",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListPendingInvitationsInOrg",
  "/orgs/:org/teams/:teamSlug/invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListMembersInOrg",
  "/orgs/:org/teams/:teamSlug/members",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListProjectsInOrg",
  "/orgs/:org/teams/:teamSlug/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsCheckPermissionsForProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateProjectPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListReposInOrg",
  "/orgs/:org/teams/:teamSlug/repos",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsCheckPermissionsForRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateRepoPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListIdPGroupsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListChildInOrg",
  "/orgs/:org/teams/:teamSlug/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsGetCard",
  "/projects/columns/cards/:cardId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "projectsUpdateCard",
  "/projects/columns/cards/:cardId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "projectsDeleteCard",
  "/projects/columns/cards/:cardId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "projectsMoveCard",
  "/projects/columns/cards/:cardId/moves",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsGetColumn",
  "/projects/columns/:columnId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "projectsUpdateColumn",
  "/projects/columns/:columnId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "projectsDeleteColumn",
  "/projects/columns/:columnId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsListCards",
  "/projects/columns/:columnId/cards",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "projectsCreateCard",
  "/projects/columns/:columnId/cards",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "projectsMoveColumn",
  "/projects/columns/:columnId/moves",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("projectsGet", "/projects/:projectId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("projectsUpdate", "/projects/:projectId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("projectsDelete", "/projects/:projectId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "projectsListCollaborators",
  "/projects/:projectId/collaborators",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "projectsAddCollaborator",
  "/projects/:projectId/collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "projectsRemoveCollaborator",
  "/projects/:projectId/collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsGetPermissionForUser",
  "/projects/:projectId/collaborators/:username/permission",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsListColumns",
  "/projects/:projectId/columns",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "projectsCreateColumn",
  "/projects/:projectId/columns",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("rateLimitGet", "/rate_limit", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete(
  "reactionsDeleteLegacy",
  "/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposGet", "/repos/:owner/:repo", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("reposUpdate", "/repos/:owner/:repo", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("reposDelete", "/repos/:owner/:repo", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "actionsListArtifactsForRepo",
  "/repos/:owner/:repo/actions/artifacts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsDownloadArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetJobForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsDownloadJobLogsForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId/logs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListSelfHostedRunnersForRepo",
  "/repos/:owner/:repo/actions/runners",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListRunnerApplicationsForRepo",
  "/repos/:owner/:repo/actions/runners/downloads",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsCreateRegistrationTokenForRepo",
  "/repos/:owner/:repo/actions/runners/registration-token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsCreateRemoveTokenForRepo",
  "/repos/:owner/:repo/actions/runners/remove-token",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteSelfHostedRunnerFromRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListWorkflowRunsForRepo",
  "/repos/:owner/:repo/actions/runs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListWorkflowRunArtifacts",
  "/repos/:owner/:repo/actions/runs/:runId/artifacts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsCancelWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/cancel",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListJobsForWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/jobs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsDownloadWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "actionsReRunWorkflow",
  "/repos/:owner/:repo/actions/runs/:runId/rerun",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetWorkflowRunUsage",
  "/repos/:owner/:repo/actions/runs/:runId/timing",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListRepoSecrets",
  "/repos/:owner/:repo/actions/secrets",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetRepoPublicKey",
  "/repos/:owner/:repo/actions/secrets/public-key",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "actionsCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "actionsDeleteRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListRepoWorkflows",
  "/repos/:owner/:repo/actions/workflows",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsListWorkflowRuns",
  "/repos/:owner/:repo/actions/workflows/:workflowId/runs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "actionsGetWorkflowUsage",
  "/repos/:owner/:repo/actions/workflows/:workflowId/timing",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListAssignees",
  "/repos/:owner/:repo/assignees",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesCheckUserCanBeAssigned",
  "/repos/:owner/:repo/assignees/:assignee",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposEnableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDisableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListBranches",
  "/repos/:owner/:repo/branches",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetBranch",
  "/repos/:owner/:repo/branches/:branch",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposUpdateBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposSetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetPullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdatePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeletePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetStatusChecksProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateStatusCheckPotection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveStatusCheckProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetAllStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposSetStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposAddStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetAppsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposSetAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposAddAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetTeamsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposSetTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposAddTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetUsersWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposSetUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposAddUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "checksCreate",
  "/repos/:owner/:repo/check-runs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "checksUpdate",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksGet",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksListAnnotations",
  "/repos/:owner/:repo/check-runs/:checkRunId/annotations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "checksCreateSuite",
  "/repos/:owner/:repo/check-suites",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "checksSetSuitesPreferences",
  "/repos/:owner/:repo/check-suites/preferences",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksGetSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksListForSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "checksRerequestSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "codeScanningListAlertsForRepo",
  "/repos/:owner/:repo/code-scanning/alerts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "codeScanningGetAlert",
  "/repos/:owner/:repo/code-scanning/alerts/:alertId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListCollaborators",
  "/repos/:owner/:repo/collaborators",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposCheckCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposAddCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposRemoveCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCollaboratorPermissionLevel",
  "/repos/:owner/:repo/collaborators/:username/permission",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListCommitCommentsForRepo",
  "/repos/:owner/:repo/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListCommits",
  "/repos/:owner/:repo/commits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListBranchesForHeadCommit",
  "/repos/:owner/:repo/commits/:commitSha/branches-where-head",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListCommentsForCommit",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateCommitComment",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListPullRequestsAssociatedWithCommit",
  "/repos/:owner/:repo/commits/:commitSha/pulls",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCommit",
  "/repos/:owner/:repo/commits/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksListForRef",
  "/repos/:owner/:repo/commits/:ref/check-runs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "checksListSuitesForRef",
  "/repos/:owner/:repo/commits/:ref/check-suites",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCombinedStatusForRef",
  "/repos/:owner/:repo/commits/:ref/status",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListCommitStatusesForRef",
  "/repos/:owner/:repo/commits/:ref/statuses",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "codesOfConductGetForRepo",
  "/repos/:owner/:repo/community/code_of_conduct",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCommunityProfileMetrics",
  "/repos/:owner/:repo/community/profile",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposCompareCommits",
  "/repos/:owner/:repo/compare/:base...:head",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetContent",
  "/repos/:owner/:repo/contents/:path",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposCreateOrUpdateFileContents",
  "/repos/:owner/:repo/contents/:path",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteFile",
  "/repos/:owner/:repo/contents/:path",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListContributors",
  "/repos/:owner/:repo/contributors",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListDeployments",
  "/repos/:owner/:repo/deployments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateDeployment",
  "/repos/:owner/:repo/deployments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListDeploymentStatuses",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateDispatchEvent",
  "/repos/:owner/:repo/dispatches",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListRepoEvents",
  "/repos/:owner/:repo/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposListForks", "/repos/:owner/:repo/forks", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post(
  "reposCreateFork",
  "/repos/:owner/:repo/forks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gitCreateBlob",
  "/repos/:owner/:repo/git/blobs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitGetBlob",
  "/repos/:owner/:repo/git/blobs/:fileSha",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gitCreateCommit",
  "/repos/:owner/:repo/git/commits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitGetCommit",
  "/repos/:owner/:repo/git/commits/:commitSha",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitListMatchingRefs",
  "/repos/:owner/:repo/git/matching-refs/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitGetRef",
  "/repos/:owner/:repo/git/ref/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gitCreateRef",
  "/repos/:owner/:repo/git/refs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "gitUpdateRef",
  "/repos/:owner/:repo/git/refs/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "gitDeleteRef",
  "/repos/:owner/:repo/git/refs/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gitCreateTag",
  "/repos/:owner/:repo/git/tags",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitGetTag",
  "/repos/:owner/:repo/git/tags/:tagSha",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "gitCreateTree",
  "/repos/:owner/:repo/git/trees",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "gitGetTree",
  "/repos/:owner/:repo/git/trees/:treeSha",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListWebhooks",
  "/repos/:owner/:repo/hooks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateWebhook",
  "/repos/:owner/:repo/hooks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposPingWebhook",
  "/repos/:owner/:repo/hooks/:hookId/pings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposTestPushWebhook",
  "/repos/:owner/:repo/hooks/:hookId/tests",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "migrationsStartImport",
  "/repos/:owner/:repo/import",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetImportStatus",
  "/repos/:owner/:repo/import",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "migrationsUpdateImport",
  "/repos/:owner/:repo/import",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "migrationsCancelImport",
  "/repos/:owner/:repo/import",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetCommitAuthors",
  "/repos/:owner/:repo/import/authors",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "migrationsMapCommitAuthor",
  "/repos/:owner/:repo/import/authors/:authorId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetLargeFiles",
  "/repos/:owner/:repo/import/large_files",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "migrationsSetLfsPreference",
  "/repos/:owner/:repo/import/lfs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsGetRepoInstallation",
  "/repos/:owner/:repo/installation",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "interactionsGetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "interactionsSetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "interactionsRemoveRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListInvitations",
  "/repos/:owner/:repo/invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListForRepo",
  "/repos/:owner/:repo/issues",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post("issuesCreate", "/repos/:owner/:repo/issues", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "issuesListCommentsForRepo",
  "/repos/:owner/:repo/issues/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesGetComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "issuesUpdateComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesDeleteComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListEventsForRepo",
  "/repos/:owner/:repo/issues/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesGetEvent",
  "/repos/:owner/:repo/issues/events/:eventId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesGet",
  "/repos/:owner/:repo/issues/:issueNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "issuesUpdate",
  "/repos/:owner/:repo/issues/:issueNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "issuesAddAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesRemoveAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListComments",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "issuesCreateComment",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListEvents",
  "/repos/:owner/:repo/issues/:issueNumber/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListLabelsOnIssue",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "issuesAddLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "issuesSetLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesRemoveAllLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesRemoveLabel",
  "/repos/:owner/:repo/issues/:issueNumber/labels/:name",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "issuesLock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesUnlock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListEventsForTimeline",
  "/repos/:owner/:repo/issues/:issueNumber/timeline",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListDeployKeys",
  "/repos/:owner/:repo/keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateDeployKey",
  "/repos/:owner/:repo/keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListLabelsForRepo",
  "/repos/:owner/:repo/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "issuesCreateLabel",
  "/repos/:owner/:repo/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesGetLabel",
  "/repos/:owner/:repo/labels/:name",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "issuesUpdateLabel",
  "/repos/:owner/:repo/labels/:name",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesDeleteLabel",
  "/repos/:owner/:repo/labels/:name",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListLanguages",
  "/repos/:owner/:repo/languages",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "licensesGetForRepo",
  "/repos/:owner/:repo/license",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post("reposMerge", "/repos/:owner/:repo/merges", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "issuesListMilestones",
  "/repos/:owner/:repo/milestones",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "issuesCreateMilestone",
  "/repos/:owner/:repo/milestones",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesGetMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "issuesUpdateMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "issuesDeleteMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListLabelsForMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber/labels",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListRepoNotificationsForAuthenticatedUser",
  "/repos/:owner/:repo/notifications",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "activityMarkRepoNotificationsAsRead",
  "/repos/:owner/:repo/notifications",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposGetPages", "/repos/:owner/:repo/pages", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post(
  "reposCreatePagesSite",
  "/repos/:owner/:repo/pages",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeletePagesSite",
  "/repos/:owner/:repo/pages",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposUpdateInformationAboutPagesSite",
  "/repos/:owner/:repo/pages",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposRequestPagesBuild",
  "/repos/:owner/:repo/pages/builds",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListPagesBuilds",
  "/repos/:owner/:repo/pages/builds",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetLatestPagesBuild",
  "/repos/:owner/:repo/pages/builds/latest",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetPagesBuild",
  "/repos/:owner/:repo/pages/builds/:buildId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "projectsListForRepo",
  "/repos/:owner/:repo/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "projectsCreateForRepo",
  "/repos/:owner/:repo/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("pullsList", "/repos/:owner/:repo/pulls", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post("pullsCreate", "/repos/:owner/:repo/pulls", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "pullsListReviewCommentsForRepo",
  "/repos/:owner/:repo/pulls/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsGetReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "pullsUpdateReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "pullsDeleteReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reactionsDeleteForPullRequestComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsGet",
  "/repos/:owner/:repo/pulls/:pullNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "pullsUpdate",
  "/repos/:owner/:repo/pulls/:pullNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListReviewComments",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "pullsCreateReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "pullsCreateReplyForReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListCommits",
  "/repos/:owner/:repo/pulls/:pullNumber/commits",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListFiles",
  "/repos/:owner/:repo/pulls/:pullNumber/files",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsCheckIfMerged",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "pullsMerge",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "pullsRequestReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "pullsRemoveRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListReviews",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "pullsCreateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsGetReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "pullsDeletePendingReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "pullsUpdateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "pullsListCommentsForReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "pullsDismissReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "pullsSubmitReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "pullsUpdateBranch",
  "/repos/:owner/:repo/pulls/:pullNumber/update-branch",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetReadme",
  "/repos/:owner/:repo/readme",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListReleases",
  "/repos/:owner/:repo/releases",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateRelease",
  "/repos/:owner/:repo/releases",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetLatestRelease",
  "/repos/:owner/:repo/releases/latest",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetReleaseByTag",
  "/repos/:owner/:repo/releases/tags/:tag",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposUpdateRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeleteRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListReleaseAssets",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposUploadReleaseAsset",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListStargazersForRepo",
  "/repos/:owner/:repo/stargazers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCodeFrequencyStats",
  "/repos/:owner/:repo/stats/code_frequency",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetCommitActivityStats",
  "/repos/:owner/:repo/stats/commit_activity",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetContributorsStats",
  "/repos/:owner/:repo/stats/contributors",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetParticipationStats",
  "/repos/:owner/:repo/stats/participation",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetPunchCardStats",
  "/repos/:owner/:repo/stats/punch_card",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateCommitStatus",
  "/repos/:owner/:repo/statuses/:sha",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListWatchersForRepo",
  "/repos/:owner/:repo/subscribers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityGetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "activitySetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "activityDeleteRepoSubscription",
  "/repos/:owner/:repo/subscription",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposListTags", "/repos/:owner/:repo/tags", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("reposListTeams", "/repos/:owner/:repo/teams", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "reposGetAllTopics",
  "/repos/:owner/:repo/topics",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposReplaceAllTopics",
  "/repos/:owner/:repo/topics",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetClones",
  "/repos/:owner/:repo/traffic/clones",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetTopPaths",
  "/repos/:owner/:repo/traffic/popular/paths",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetTopReferrers",
  "/repos/:owner/:repo/traffic/popular/referrers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposGetViews",
  "/repos/:owner/:repo/traffic/views",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposTransfer",
  "/repos/:owner/:repo/transfer",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposCheckVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "reposEnableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDisableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposDownloadArchive",
  "/repos/:owner/:repo/:archiveFormat/:ref",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateUsingTemplate",
  "/repos/:templateOwner/:templateRepo/generate",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposListPublic", "/repositories", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "scimListProvisionedIdentities",
  "/scim/v2/organizations/:org/Users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "scimProvisionAndInviteUser",
  "/scim/v2/organizations/:org/Users",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "scimGetProvisioningInformationForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "scimSetInformationForProvisionedUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "scimUpdateAttributeForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "scimDeleteUserFromOrg",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("searchCode", "/search/code", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("searchCommits", "/search/commits", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "searchIssuesAndPullRequests",
  "/search/issues",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("searchLabels", "/search/labels", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("searchRepos", "/search/repositories", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("searchTopics", "/search/topics", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("searchUsers", "/search/users", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("teamsGetLegacy", "/teams/:teamId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("teamsUpdateLegacy", "/teams/:teamId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("teamsDeleteLegacy", "/teams/:teamId", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "teamsListDiscussionsLegacy",
  "/teams/:teamId/discussions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "teamsCreateDiscussionLegacy",
  "/teams/:teamId/discussions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsUpdateDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsDeleteDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListDiscussionCommentsLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "teamsCreateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsUpdateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsDeleteDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reactionsListForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reactionsCreateForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListPendingInvitationsLegacy",
  "/teams/:teamId/invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListMembersLegacy",
  "/teams/:teamId/members",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetMemberLegacy",
  "/teams/:teamId/members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddMemberLegacy",
  "/teams/:teamId/members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveMemberLegacy",
  "/teams/:teamId/members/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsGetMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListProjectsLegacy",
  "/teams/:teamId/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsCheckPermissionsForProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateProjectPermissionsLegacy",
  "/teams/:teamId/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListReposLegacy",
  "/teams/:teamId/repos",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsCheckPermissionsForRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "teamsAddOrUpdateRepoPermissionsLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "teamsRemoveRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListIdPGroupsForLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListChildLegacy",
  "/teams/:teamId/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("usersGetAuthenticated", "/user", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch("usersUpdateAuthenticated", "/user", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "usersListBlockedByAuthenticated",
  "/user/blocks",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("usersCheckBlocked", "/user/blocks/:username", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.put("usersBlock", "/user/blocks/:username", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete("usersUnblock", "/user/blocks/:username", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.patch(
  "usersSetPrimaryEmailVisibilityForAuthenticated",
  "/user/email/visibility",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListEmailsForAuthenticated",
  "/user/emails",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "usersAddEmailForAuthenticated",
  "/user/emails",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "usersDeleteEmailForAuthenticated",
  "/user/emails",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListFollowersForAuthenticatedUser",
  "/user/followers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListFollowedByAuthenticated",
  "/user/following",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersCheckPersonIsFollowedByAuthenticated",
  "/user/following/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put("usersFollow", "/user/following/:username", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.delete(
  "usersUnfollow",
  "/user/following/:username",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListGpgKeysForAuthenticated",
  "/user/gpg_keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "usersCreateGpgKeyForAuthenticated",
  "/user/gpg_keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersGetGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "usersDeleteGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListInstallationsForAuthenticatedUser",
  "/user/installations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListInstallationReposForAuthenticatedUser",
  "/user/installations/:installationId/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "appsAddRepoToInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "appsRemoveRepoFromInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "issuesListForAuthenticatedUser",
  "/user/issues",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListPublicSshKeysForAuthenticated",
  "/user/keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "usersCreatePublicSshKeyForAuthenticated",
  "/user/keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersGetPublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "usersDeletePublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListSubscriptionsForAuthenticatedUser",
  "/user/marketplace_purchases",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsListSubscriptionsForAuthenticatedUserStubbed",
  "/user/marketplace_purchases/stubbed",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsListMembershipsForAuthenticatedUser",
  "/user/memberships/orgs",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "orgsGetMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "orgsUpdateMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "migrationsStartForAuthenticatedUser",
  "/user/migrations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsListForAuthenticatedUser",
  "/user/migrations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetStatusForAuthenticatedUser",
  "/user/migrations/:migrationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsGetArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "migrationsDeleteArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "migrationsUnlockRepoForAuthenticatedUser",
  "/user/migrations/:migrationId/repos/:repoName/lock",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("orgsListForAuthenticatedUser", "/user/orgs", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.post(
  "projectsCreateForAuthenticatedUser",
  "/user/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListPublicEmailsForAuthenticated",
  "/user/public_emails",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListForAuthenticatedUser",
  "/user/repos",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post(
  "reposCreateForAuthenticatedUser",
  "/user/repos",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "reposListInvitationsForAuthenticatedUser",
  "/user/repository_invitations",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.patch(
  "reposAcceptInvitation",
  "/user/repository_invitations/:invitationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "reposDeclineInvitation",
  "/user/repository_invitations/:invitationId",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListReposStarredByAuthenticatedUser",
  "/user/starred",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityCheckRepoIsStarredByAuthenticatedUser",
  "/user/starred/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.put(
  "activityStarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.delete(
  "activityUnstarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListWatchedReposForAuthenticatedUser",
  "/user/subscriptions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "teamsListForAuthenticatedUser",
  "/user/teams",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "migrationsListReposForUser",
  "/user/:migrationId/repositories",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("usersList", "/users", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get("usersGetByUsername", "/users/:username", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "activityListEventsForAuthenticatedUser",
  "/users/:username/events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListOrgEventsForAuthenticatedUser",
  "/users/:username/events/orgs/:org",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListPublicEventsForUser",
  "/users/:username/events/public",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListFollowersForUser",
  "/users/:username/followers",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListFollowingForUser",
  "/users/:username/following",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersCheckFollowingForUser",
  "/users/:username/following/:targetUser",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("gistsListForUser", "/users/:username/gists", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "usersListGpgKeysForUser",
  "/users/:username/gpg_keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersGetContextForUser",
  "/users/:username/hovercard",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "appsGetUserInstallation",
  "/users/:username/installation",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "usersListPublicKeysForUser",
  "/users/:username/keys",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("orgsListForUser", "/users/:username/orgs", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "projectsListForUser",
  "/users/:username/projects",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListReceivedEventsForUser",
  "/users/:username/received_events",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListReceivedPublicEventsForUser",
  "/users/:username/received_events/public",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get("reposListForUser", "/users/:username/repos", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

router.get(
  "activityListReposStarredByUser",
  "/users/:username/starred",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.get(
  "activityListReposWatchedByUser",
  "/users/:username/subscriptions",
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
