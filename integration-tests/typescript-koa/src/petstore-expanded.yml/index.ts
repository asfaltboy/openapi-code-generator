/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import joi from "@hapi/joi"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"

function paramValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{}, { params: Type }> {
  return function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.params, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.params = result.value

    next()
  }
}

function queryValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{}, { query: Type }> {
  return function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.query, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.query = result.value

    next()
  }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

const findPetsQuerySchema = joi
  .object()
  .keys({ tags: joi.array(), limit: joi.number() })

router.get(
  "findPets",
  "/pets",
  queryValidationFactory<any>(findPetsQuerySchema),
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

router.post("addPet", "/pets", async (ctx, next) => {
  ctx.status = 501
  ctx.body = { error: "not implemented" }
  return next()
})

const findPetByIdParamSchema = joi
  .object()
  .keys({ id: joi.number().required() })

router.get(
  "findPetById",
  "/pets/:id",
  paramValidationFactory<any>(findPetByIdParamSchema),
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

const deletePetParamSchema = joi.object().keys({ id: joi.number().required() })

router.delete(
  "deletePet",
  "/pets/:id",
  paramValidationFactory<any>(deletePetParamSchema),
  async (ctx, next) => {
    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
